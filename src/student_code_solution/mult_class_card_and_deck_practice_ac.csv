,acid,anon_code
2568,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        front_list=self.card_list[0:(len(self.card_list)/2)]
        print(front_list)
"
2571,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
2900,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        front_list=self.card_list[0:(len(self.card_list)/2)]
        print(front_list)
        
mydeck = Deck()
mydeck.shuffle()
"
2901,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        front_list=[]
        front_list=self.card_list[0:(len(self.card_list)/2)]
        print(front_list)
        
mydeck = Deck()
mydeck.shuffle()
"
2902,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        front_list=[]
        front_list=self.card_list[0:(len(self.card_list))]
        print(front_list)
        
mydeck = Deck()
mydeck.shuffle()
"
2903,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        front_list=[]
        front_list=self.card_list[0:(len(self.card_list))]
        print('FRONT',front_list)
        print('PACK: ',self.card_list)
        
mydeck = Deck()
mydeck.shuffle()
"
2905,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output


    def shuffle(self):
        front_list = []
        back_list = []
        cut = int(len(self.card_list)/2)
        front_list=self.card_list[0:cut ]
        back_list=self.card_list[cut:]
        self.card_list = []
        for i in range(cut):
            self.card_list.append(front_list[i])
            self.card_list.append(back_list[i])
        return
"
4025,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
     def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append[card1, card2]
        return new_deck

"
4029,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        middle_index = len(self.card_list // 2)
        first_deck = list[:middle_index]
        second_deck = list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append[card1, card2]

"
4030,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        middle_index = len(self.card_list // 2)
        first_deck = list[:middle_index]
        second_deck = list[middle_index:]
        for card1 in first_deck:
            for card2 in second deck:
                new_deck.append[card1, card2]

"
4031,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = list[:middle_index]
        second_deck = list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append[card1, card2]

"
4032,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append[card1, card2]
        return new_deck

"
4033,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        if length % 2 == 0:
            for card1 in first_deck:
                for card2 in second_deck:
                    new_deck.append(card1)
                    new_deck.append(card2)
        else:
            new_deck.append(first_deck)
            new_deck.append(second_deck)
            
        return new_deck

"
4034,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append[card1, card2]
        return new_deck

"
4035,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append(card1, card2)
        return new_deck

"
4036,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        if length % 2 == 0:
            for card1 in first_deck:
                new_deck.append(card1)
            for card2 in second_deck:
                new_deck.append(card2)
   
           
           
            
        return new_deck

"
4037,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
4038,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
     def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append[card1, card2]
        return new_deck

"
4039,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        for card1 in first_deck:
            for card2 in second_deck:
                new_deck.append(card1)
                new_deck.append(card2)
        return new_deck

"
4040,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        print(first_deck)
        second_deck = self.card_list[middle_index:]
        print(second_deck)
        if length % 2 == 0:
            for card1 in first_deck:
                for card2 in second_deck:
                    new_deck.append(card1)
                    new_deck.append(card2)
            
        return new_deck

"
4041,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        print(first_deck)
        second_deck = self.card_list[middle_index:]
        print(second_deck)
        if length % 2 == 0:
            for card1 in first_deck:
                for card2 in second_deck:
                    new_deck.append(card1)
                    new_deck.append(card2)
        else:
            
        return new_deck

"
4042,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        if length % 2 == 0:
            for card1 in first_deck:
                for card2 in second_deck:
                    new_deck.append(card1)
                    new_deck.append(card2)
        else:
            for card1 in first_deck:
                new_deck.append(card1)
            for card2 in second_deck:
                new_deck.append(card2)
           
            
        return new_deck

"
4043,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        if length % 2 == 0:
            for card1 in first_deck:
                for card2 in second_deck:
                    new_deck.append(card1)
                    new_deck.append(card2)
        else:
            for card1 in first_deck:
                new_deck.append(card1)
            for card2 in second_deck:
                new_deck.append(card2)
           
            
        return new_deck

"
4044,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list)
        middle_index = length // 2
        first_deck = self.card_list[:middle_index]
        second_deck = self.card_list[middle_index:]
        if length % 2 == 0:
            for card1 in first_deck:
                new_deck.append(card1)
            for card2 in second_deck:
                new_deck.append(card2)
       
            
           
       
        return new_deck

"
4045,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
            if len(second_deck) > len(first_deck):
                new_deck.append(len(second_deck) - 1)
       
       
        return new_deck

"
4046,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
        if len(second_deck) > len(first_deck):
            new_deck.append(second_deck[i-1])
       
       
        print( new_deck)

"
4047,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
        if len(second_deck) > len(first_deck):
            new_deck.append(second_deck[-1])
       
       
        return new_deck

"
4048,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
        if len(second_deck) > len(first_deck):
            new_deck.append(second_deck[i-1])
       
        return new_deck

"
4049,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
        if len(second_deck) > len(first_deck):
            new_deck.append(len(second_deck) - 1)
       
       
        print( new_deck)

"
4050,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
        if len(second_deck) > len(first_deck):
            new_deck.append(second_deck[i-1])
       
        return new_deck

"
4051,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
            if len(second_deck) > len(first_deck):
                new_deck.append(second_deck[i-1])
       
        return new_deck

"
4053,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
       
       
        return new_deck

"
4054,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
        if len(second_deck) > len(first_deck):
            new_deck.append(len(second_deck) - 1)
       
       
        return new_deck

"
4055,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
        if len(second_deck) > len(first_deck):
            new_deck.append(len(second_deck) - 1)
       
       
        return new_deck

"
4056,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            i += 1
        if len(second_deck) > len(first_deck):
            new_deck.append(second_deck[i-1])
       
       
        return new_deck

"
4057,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        i = 0
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
            if len(second_deck) > len(first_deck):
                new_deck.append(len(second_deck) - 1)
            i += 1
       
       
        return new_deck

"
4058,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_deck = []
        length = len(self.card_list) # 5
        middle_index = length // 2
        first_deck = self.card_list[:middle_index] # 2
        second_deck = self.card_list[middle_index:] # 3
        for i in range(len(first_deck)):
            new_deck.append(first_deck[i])
            new_deck.append(second_deck[i])
        if len(second_deck) > len(first_deck):
            new_deck.append(second_deck[-1])

        self.card_list = new_deck

"
17126,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        l3 = []
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        self.card_list = l3

"
17127,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        l3 = []
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2)>len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
17155,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half+1:]
        
        new_deck = []
        index = 0
        l1_len = len(list1)
        l2_len = len(list2)
        if l1_len > l2_len:
            loops = l1_len
        elif l2_len > l1_len:
            loops = l2_len
        else:
            loops = l1_len
            
        while index < loops:
            if index < l1_len:
                new_deck.append(list1[index])
            if index < l2_len:
                new_deck.append(list2[index])
        return new_deck       

"
17156,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half:-1]
        l1_len = len(list1)
        l2_len = len(list2)
        
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17157,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half+1:]
        
        new_deck = []
        index = 0
        l1_len = len(list1)
        l2_len = len(list2)
        if l1_len > l2_len:
            loops = l1_len
        elif l2_len > l1_len:
            loops = l2_len
        else:
            loops = l1_len
            
        while index < loops:
            if index < l1_len:
                new_deck.append(list1[index])
            if index < l2_len:
                new_deck.append(list2[index])
            index += 1
        return new_deck       

"
17158,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half+1:]
        
        new_deck = []
        index = 0
        l1_len = len(list1)
        l2_len = len(list2)
        if l1_len > l2_len:
            loops = l1_len
        elif l2_len > l1_len:
            loops = l2_len
        else:
            loops = l1_len
            
        while index + 1 < loops:
            if index < l1_len:
                new_deck.append(list1[index])
            if index < l2_len:
                new_deck.append(list2[index])
            index += 1
        return new_deck       

"
17159,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[-half:-1]
        
        new_deck = []
        index = 0
        l1_len = len(list1)
        l2_len = len(list2)
        if l1_len > l2_len:
            loops = l1_len
        elif l2_len > l1_len:
            loops = l2_len
        else:
            loops = l1_len
            
        while index < loops:
            if index < l1_len:
                new_deck.append(list1[index])
            if index < l2_len:
                new_deck.append(list2[index])
            index += 1
        return new_deck       

"
17160,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        
        list1 = self.card_list[:half]
        list2 = self.card_list[-half:-1]
        
        new_deck = []
        index = 0
        l1_len = len(list1)
        l2_len = len(list2)
        if l1_len > l2_len:
            loops = l1_len
        elif l2_len > l1_len:
            loops = l2_len
        else:
            loops = l1_len
            
        while index < loops:
            if index < l1_len:
                new_deck.append(list1[index])
            if index < l2_len:
                new_deck.append(list2[index])
            index += 1
        return new_deck       

"
17161,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half+1:-1]
        l1_len = len(list1)
        l2_len = len(list2)
        
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17162,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half+1:]
        l1_len = len(list1)
        l2_len = len(list2)
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17163,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[-half:-1]
        l1_len = len(list1)
        l2_len = len(list2)
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17164,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[-half:-1]
        l1_len = len(list1)
        l2_len = len(list2)
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17165,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half:-1]
        l1_len = len(list1)
        l2_len = len(list2)
        
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17166,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half]
        list2 = self.card_list[half:-1]
        l1_len = len(list1)
        l2_len = len(list2)
        
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17167,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half:-1]
        l1_len = len(list1)
        l2_len = len(list2)
        
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17168,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        half = len(self.card_list)//2
        length = len(self.card_list)
        new_deck = []
        
        list1 = self.card_list[:half+1]
        list2 = self.card_list[half:]
        l1_len = len(list1)
        l2_len = len(list2)
        
        
        for i in range(length):
            if i < l1_len:
                new_deck.append(list1[i])
            if i < l2_len:
                new_deck.append(list2[i])
        self.card_list = new_deck
            

"
17806,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half_list = math.floor(len(self.card_list) / 2)
        first_list = self.card_list[:half_list]
        second_list = self.card_list[half_list:]
            
"
17811,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        first_list = []
        second_list = []
        half_list = math.floor(len(self.card_list) / 2)
        if len(self.card_list) % 2 == 0:
            first_list = self.card_list[:len(self.card_list) / 2]
            second_list = self.card_list[len(self.card_list) / 2:]
        else:
            
"
17812,mult_class_card_and_deck_practice_ac,"import math 
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half_list = math.floor(len(self.card_list) / 2)
        first_list = self.card_list[:half_list]
        second_list = self.card_list[half_list:]
            
"
17813,mult_class_card_and_deck_practice_ac,"import math 
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half_list = math.floor(len(self.card_list) / 2)
        first_list = self.card_list[:half_list]
        second_list = self.card_list[half_list:]
        new_list = []
        for i in range(half_list):
            new_list.append(first_list[i])
            new_list.append(second_list[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(second_list[-1])
        self.card_list = new_list
            
"
18520,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        len_first_list = len(self.card_list) // 2
        
        first_list = self.card_list[0:len_first_list]
        second_list = self.card_list[len_first_list: len(self.card_list)]
        
        new_list = []
        
        for i in range(len_first_list):
            new_list.append(first_list[i])
            new_list.append(second_list[i])

"
18552,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
18556,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
19233,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1, lst2 = self.card_list[:len(self.card_list)//2], self.card_list[len(self.card_list)//2:]
        for i in range(len(lst1)):
            new.append(lst1[i])
            new.append(lst2[i])
        return new

"
19234,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1, lst2 = self.card_lst[:len(self.card_list//2)], self.card_lst[len(self.card_list//2):]
        for i in range(len(lst1)):
            new.append(lst1[i])
            new.append(lst2[i])
        return new

"
19239,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1, lst2 = self.card_lst[:len(self.card_list)//2], self.card_lst[len(self.card_list)//2:]
        for i in range(len(lst1)):
            new.append(lst1[i])
            new.append(lst2[i])
        return new

"
19255,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2 - 1]
        list2 = self.card_list[len(self.card_list)//2 - 1:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in result:
            print(card)
    

"
19256,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[0:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            if list1[i] not in result:
                result.append(list1[i])
            if list2[i] not in result:
                result.append(list2[i])
        #return result
        for card in list1:
            print(result)
    

"
19257,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in result:
            print(card)
    

"
19258,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in result:
            print(card)
    

"
19259,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list2:
            print(card)
    

"
19260,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list1:
            print(card)
    

"
19261,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2 + 1]
        list2 = self.card_list[len(self.card_list)//2 + 1:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in result:
            print(card)
    

"
19262,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list1:
            print(card)
    

"
19263,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[0:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list1:
            print(card)
    

"
19264,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2 - 2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list1:
            print(card)
    

"
19265,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list//2):
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        result = list1 + list2
        for card in result:
            print(card)
    

"
19266,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2 - 1]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list1:
            print(card)
    

"
19267,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[0:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            if list1[i] not in result:
                result.append(list1[i])
            if list2[i] not in result:
                result.append(list2[i])
        #return result
        for card in result:
            print(card)
    

"
19268,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        result = list1 + list2
        for card in result:
            print(card)
    

"
19269,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        #list1 = self.card_list[0:len(self.card_list)//2]
        #list2 = self.card_list[len(self.card_list)//2:]
        result = []
        i = 0
        while i < (len(self.card_list)):
            result.append(self.card_list[i])
            i + 2
        i = 1
        while i < (len(self.card_list)) - 1:
            result.append(self.card_list[i])
            i + 2
        return result
        #for card in result:
            #print(card)
    

"
19270,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[0:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            if list1[i] not in result:
                result.append(list1[i])
            if list2[i] not in result:
                result.append(list2[i])
        #return result
        for card in list1:
            print(card)
    

"
19271,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        for i in range(len(self.card_list)):
            if i % 2 == 0:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        result = list1 + list2
        for card in result:
            print(card)
    

"
19272,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[0:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            if list1[i] not in result:
                result.append(list1[i])
            if list2[i] not in result:
                result.append(list2[i])
        return result
        for card in result:
            print(card)
    

"
19273,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        #list1 = self.card_list[0:len(self.card_list)//2]
        #list2 = self.card_list[len(self.card_list)//2:]
        result = []
        i = 0
        while i < (len(self.card_list)):
            result.append(card_list[i])
            i + 2
        i = 1
        while i < (len(self.card_list)) - 1:
            result.append(card_list[i])
            i + 2
        return result
        #for card in result:
            #print(card)
    

"
19274,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list) - 5):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        #for i in range(len(list1)):
            #result.append()
        for card in self.card_list:
            print(card)
    

"
19275,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        #list1 = self.card_list[0:len(self.card_list)//2]
        #list2 = self.card_list[len(self.card_list)//2:]
        result = []
        i = 0
        while i < range(len(self.card_list)):
            result.append(card_list[i])
            i + 2
        i = 1
        while i < range(len(self.card_list)) - 1:
            result.append(card_list[i])
            i + 2
        return result
        #for card in result:
            #print(card)
    

"
19276,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        for i in range(len(self.card_list)):
            if i % 2 == 0:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        return list1 + list2
        #for card in result:
            #print(card)
    

"
19277,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append()
        for card in self.card_list:
            print(card)
    

"
19278,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        #for i in range(len(list1)):
            #result.append()
        for card in self.card_list:
            print(card)
    

"
19279,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        return result
        #for card in self.card_list:
            #print(card)
    

"
19280,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        return result
    

"
19281,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        for card in self.card_list:
            print(card)
    

"
19282,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        return result
        for card in list2:
            #print(card)
    

"
19283,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list2:
            print(card)
    

"
19284,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        return result
        for card in list2:
            print(card)
    

"
19285,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in list1:
            print(card)
    

"
19286,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = []
        list2 = []
        result = []
        for i in range(len(self.card_list)):
            if i < len(self.card_list)//2:
                list1.append(self.card_list[i])
            else:
                list2.append(self.card_list[i])
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        #return result
        for card in result:
            print(card)
    

"
19287,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len((self.card_list)//2)
        list1 = self.card_list[:mid]
        list2 = self.card_list[mid:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        if len(self.card_list) % 2 == 1:
            result.append(list2[-1])
        self.card_list = result
    

"
19288,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len((self.card_list)//2)
        list1 = self.card_list[:mid]
        list2 = self.card_list[mid:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        if len(self.card_list % 2 == 1):
            result.append(list2[-1])
        return result
    

"
19289,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        list1 = self.card_list[:mid]
        list2 = self.card_list[mid:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        if len(self.card_list) % 2 == 1:
            result.append(list2[-1])
        self.card_list = result
    

"
19788,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        return result

"
19789,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2 +1]
        list2 = self.card_list[len(self.card_list)//2 +1:]
        result = zip(list1, list2)
        return result

"
19792,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(card_list)//2]
        list2 = self.card_list[len(card_list)//2:]
        result = zip(list1, list2)
        return result

"
19793,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = zip(list1, list2)
        return result

"
19794,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        print (list1)
        list2 = self.card_list[len(self.card_list)//2:]
        print (list2)
        result = []
        for i in range(len(list1)):
            result.append(list1[i])
            result.append(list2[i])
        return result

"
19795,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:]
        result = []
        for i in range(len(list1)):
            #result.append(list1[i])
            #result.append(list2[i])
            print(list1[i])
            print(list2[i])
        return result

"
19802,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        print (list1)
        list2 = self.card_list[len(self.card_list)//2:]
        print (list2)
        result = []
        for i in range(len(list1)):
            #result.append(list1[i])
            #result.append(list2[i])
        return result

"
19803,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        print (list1)
        list2 = self.card_list[len(self.card_list)//2:]
        print (list2)
        result = []
        #for i in range(len(list1)):
            #result.append(list1[i])
            #result.append(list2[i])
        return result

"
20473,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(len(self.card_list)):
            if card <= half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(half):
            new.append(first_half[i])
            new.append(second_half[i])"
20477,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(half):
            first_half.append(self.card_list[card])
        for card in range(half):
            second_half.append(self.card_list[card])
        for i in range(half):
            new.append(first_half[i])
            new.append(second_half[i])"
20478,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        half = len(self.card_list) // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
                
        print(str(first_half))
        print(str(second_half))
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20483,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(half):
            new.append(first_half[i])
            new.append(second_half[i])"
20484,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20486,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(half):
            first_half.append(self.card_list[card])
        for card in range(half, len(self.card_list)):
            second_half.append(self.card_list[card])
        for i in range(half):
            new.append(first_half[i])
            new.append(second_half[i])

"
20487,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        half = len(self.card_list) // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
                print(first_half[card])
            else:
                second_half.append(self.card_list[card])
                print(second_half[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20488,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        half = len(self.card_list) // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20489,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(0, half):
            first_half.append(self.card_list[card])
        for card in range(half, len(self.card_list)):
            second_half.append(self.card_list[card])
        for i in range(half):
            new.append(first_half[i])
            new.append(second_half[i])

"
20490,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20491,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        half = len(self.card_list) // 2
        half = half-1
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20492,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(half):
            new.append(first_half[i])
            new.append(second_half[i])"
20493,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        length = len(self.card_list)
        half = length / 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20494,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        half = len(self.card_list) // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
                
        print(first_half)
        print(second_half)
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20495,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        half = len(self.card_list) // 2
        half = half - 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20496,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first_half = []
        second_half = []
        new = []
        half = len(self.card_list) // 2
        for card in range(len(self.card_list)):
            if card < half:
                first_half.append(self.card_list[card])
            else:
                second_half.append(self.card_list[card])
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])"
20497,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
  
        for i in range(len(first)):
            final.append(first[i])
            final.append(first[i])
  
        self.card_list = final
        
                "
20498,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
  
        for i in range(len(first)):
            final.append(first[i])
            final.append(first[j])
        for i in range(len(first)):
            print(final[i])
        
                "
20499,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        half2 = len(self.card_list) - half
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(0, half):
            final.append(self.card_list[i])
        for j in range(1, half2, 2):
            final.append(self.card_list[i])
                "
20500,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
                "
20501,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.appen(last[i])
                "
20502,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
            print(last[i])
                "
20503,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
                "
20504,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
        return final
                "
20505,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
                
        print(""Printing first half of deck: "")
        for card in range(len(first)):
            print(first[card])
            
        print(""Printing last half of deck: "")
        for card in range(len(last)):
            print(last[card])
            
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
        return final
                "
20506,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
                "
20507,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
  
        for i in range(len(first)):
            final.append(first[i])
            final.append(first[i])
            
            
            
        self.card_list = final
        
                "
20508,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
            print(first[i])
                "
20509,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
                "
20510,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        half2 = len(self.card_list) - half
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(0, half):
            final.append(self.card_list[i])
        for j in range(1, half2, 2):
            final.insert(j, self.card_list[i])
                "
20511,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        half2 = len(self.card_list) - half
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(0, half):
            final.append(self.card_list[i])
        for j in range(1, half2, 2):
            final.insert(self.card_list[i])
                "
20512,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
                
        print(""Printing first half of deck: "")
        for card in range(len(first)):
            print first[card]
            
        print(""Printing last half of deck: "")
        for card in range(len(last)):
            print last[card]
            
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
        return final
                "
20513,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
  
        for i in range(len(first)):
            final.append(first[i])
        return final
                "
20514,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        half2 = len(self.card_list) - half
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(half):
            final.append(self.card_list[i])
        for j in range(1, half2, 2):
            final.insert(self.card_list[i])
        self.card_list = final
                "
20515,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
                
        print(""Printing first half of deck: "")
        for card in first:
            print card
            
        print(""Printing last half of deck: "")
        for card in last:
            print card
            
        for i in range(len(first)):
            final.append(first[i])
            final.append(last[i])
        return final
                "
20516,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
  
        for i in range(len(first)):
            final.append(first[i])
            final.append(first[j])
        for i in range(len(final)):
            print(final[i])
        
                "
20517,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        half2 = len(self.card_list) - half
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(0, half):
            final.append(self.card_list[i])
        for j in range(1, half2, 2):
            final.insert(self.card_list[i])
        self.card_list = final
                "
20518,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
  
        for i in range(len(first)):
            final.append(first[i])
            final.append(first[j])
            
            
            
        self.card_list = final
        
                "
20519,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        half2 = len(self.card_list) - half
        final = []
        print(half)
        print(len(self.card_list))
        for i in range(half):
            final.append(self.card_list[i])
        for j in range(1, half2, 2):
            final.insert(j, self.card_list[i])
        self.card_list = final
                "
20520,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        first = []
        last = []
        final = []
        
        for i in range(len(self.card_list)):
            if i < half:
                first.append(self.card_list[i])
            else:
                last.append(self.card_list[i])
  
        for i in range(len(last)):
            if i < len(first):
                final.append(first[i])
                final.append(last[i])
            else:
                final.append(last[i])
  
        self.card_list = final
        
                "
21219,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:middle]
        l2 = self.card_list[middle:]
        l3 = []
        for i in range(len(l1)):
             l3.append(l1[i])
             l3.append(l2[i])
        if (len(l2) > len(l1)):
             l3.append(l2[-1])
        self.card_list = l3
        
"
21220,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1):
             l3.append(l1[i])
             l3.append(l2[i])
        if len(l2) > len(l1):
             l3.append(l2[-1]:
        self.card_list = l3
        
"
21221,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
    for i in range(len(l1):
             l3.append(l1[i])
             l3.append(l2[i])
        if len(l2) > len(l1):
             l3.append(l2[-1]:
        self.card_list = l3
        
"
21222,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
             l3.append(l1[i])
             l3.append(l2[i])
        if (len(l2) > len(l1)):
             l3.append(l2[-1])
        self.card_list = l3
        
"
21223,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
             l3.append(l1[i])
             l3.append(l2[i])
        if len(l2) > len(l1):
             l3.append(l2[-1]:
        self.card_list = l3
        
"
21224,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
             l3.append(l1[i])
             l3.append(l2[i])
        if (len(l2) > len(l1)):
             l3.append(l2[-1]):
        self.card_list = l3
        
"
21235,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        #print(deck1)
        print(deck2)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        #print(new_list)
"
21236,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21237,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        print(deck1)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        #print(new_list)
"
21238,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21239,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        print(deck1)
        print(len(deck1))
        print(deck2)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        #print(new_list)
"
21240,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","").strip()
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21241,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        print(deck1)
        print(len(deck1))
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        #print(new_list)
"
21242,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        #print(deck1)
        #print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        #print(new_list)
"
21243,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        #print(deck1)
        print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        #print(new_list)
"
21244,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21245,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        print(self.card_list)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        #print(new_list)
"
21246,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21247,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21248,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21249,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")
        print(cardlst)
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21250,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")[:-1]
        #print(cardlst)
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21251,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")[:-1]
        #print(cardlst)
        deck1 = cardlst[:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21252,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")[:-2]
        print(cardlst)
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21253,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")[:-1]
        print(cardlst)
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        print(deck2[-1])
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21254,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")[:-1]
        #print(cardlst)
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck2)
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21255,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("", "")[:-1]
        #print(cardlst)
        deck1 = cardlst[:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        return new_list
"
21256,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
"
21257,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[:-1])
        self.card_list = new_list
"
21832,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__(),split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck1)
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21833,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_lst = []
        deck1 = card_list[0:len(card_list // 2)]
        deck2 = card_list[len(card_list // 2):]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
"
21834,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_lst = []
        deck1 = self.card_list[0:len(card_list // 2)]
        deck2 = self.card_list[len(card_list // 2):]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
"
21835,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_lst = []
        deck1 = self.card_list[0:len(self.card_list // 2)]
        deck2 = self.card_list[len(self.card_list // 2):]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
"
21836,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
"
21837,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21838,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        print(self.card_list)
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        print(deck1)
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21839,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_lst = []
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
"
21840,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        print(deck1)
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21841,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        print(self.__str__())
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        print(deck1)
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21842,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        print(deck1)
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21843,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        print(self.card_list)
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            print(i)
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21844,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        print(card_list)
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        print(deck1)
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21845,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        print(self.output)
        deck1 = self.card_list[0:len(self.card_list) // 2]
        deck2 = self.card_list[len(self.card_list) // 2:]
        
        print(deck1)
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21846,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        print(card_list)
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            print(i)
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21847,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            print(i)
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21848,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
        print(new_list)
"
21851,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        cardlst = self.__str__().split("","")
        deck1 = cardlst[0:len(self.card_list) // 2]
        deck2 = cardlst[len(self.card_list) // 2:]
        
        for i in range(len(deck1)):
            new_list.append(deck1[i])
            new_list.append(deck2[i])
            break
        print(new_list)
"
23766,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        c1 = self.card_list[:mid]
        c2 = self.card_list[mid:]
        c3 = []
        
        for i in range c1:
            c3.append(c1[i])
            c3.append(c2[i])
            
        if len(c2)>len(c1):
            c3.append(c2[-1])
        self.card_list = c3"
23767,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        c1 = self.card_list[:mid]
        c2 = self.card_list[mid:]
        c3 = []
        
        for i in range(len(c1)):
            c3.append(c1[i])
            c3.append(c2[i])
            
        if len(c2)>len(c1):
            c3.append(c2[-1])
        self.card_list = c3"
23768,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        c1 = self.card_list[:mid]
        c2 = self.card_list[mid:]
        c3 = []
        
        for i in range(c1):
            c3.append(c1[i])
            c3.append(c2[i])
            
        if len(c2)>len(c1):
            c3.append(c2[-1])
        self.card_list = c3"
23809,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid_index = len(self.card_list) / 2
        first_half = self.card_list[:mid_index]
        second_half = self.card_list[mid_index:]
        new = []
        for i in range(len(self.card_list)):
            new.append(first_half[i])
            new.append(second_half[i])
        return new
            
        
        
            

"
23811,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid_index = len(self.card_list) / 2
        first_half = self.card_list[:mid_index]
        second_half = self.card_list[mid_index:]
        new = []
        for i in range(0,self.card_list):
            new.append(first_half[i])
            new.append(second_half[i])
        return new
            
        
        
            

"
23812,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid_index = len(self.card_list) / 2
        first_half = self.card_list[:mid_index]
        second_half = self.card_list[mid_index:]
        new = []
        for i in range(self.card_list):
            new.append(first_half[i])
            new.append(second_half[i])
        return new
            
        
        
            

"
23813,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid_index = len(self.card_list) // 2
        first_half = self.card_list[:mid_index]
        second_half = self.card_list[mid_index:]
        new = []
        for i in range(len(self.card_list)):
            new.append(first_half[i])
            new.append(second_half[i])
        return new
            
        
        
            

"
23815,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid_index = len(self.card_list) // 2
        first_half = self.card_list[:mid_index]
        second_half = self.card_list[mid_index:]
        new = []
        for i in range(len(self.card_list)//2):
            new.append(first_half[i])
            new.append(second_half[i])
        return new
            
        
        
            

"
23816,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid_index = len(self.card_list) // 2
        first_half = self.card_list[:mid_index]
        second_half = self.card_list[mid_index:]
        new = []
        for i in range(len(self.second_half):
            new.append(first_half[i])
            new.append(second_half[i])
        return new
            
        
        
            

"
23821,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid_index = len(self.card_list) // 2
        first_half = self.card_list[:mid_index]
        second_half = self.card_list[mid_index:]
        new = []
        for i in range(len(first_half)):
            new.append(first_half[i])
            new.append(second_half[i])
        if len(self.card_list) % 2 == 1:
            new.append(second_half[-1])
        self.card_list = new
        return self.card_list
            
        
        
            

"
25759,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
25780,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        mid = len(self.card_list) // 2
        newList = []
        for i in range(len(L1)):
            newList.append(L1[i])
            newList.append(L2[i])
        if len(self.card_list) % 2 == 1:
            newList.append(L2[-1])
        self.card_list = newList
        
        

"
25782,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        mid = len(self.card_list) // 2
        newList = []
        for i in range(len(L1)):
            newList.append(L1[i])
            newList.append(L2[i])
        if (len(self.card_list) % 2 == 1):
            newList.append(L2[-1])
        self.card_list = newList
        
        

"
25783,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        
        newList = []
        for i in range(len(L1)):
            newList.append(L1[i])
            newList.append(L2[i])
        if len(self.card_list) % 2 == 1:
            newList.append(L2[-1])
        self.card_list = newList
        
        

"
26305,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1):
           new_list.append(l1(i))
           new_list.append(l2(i))
        if len(self.card_list) % 2 == 1 #odd
           new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26306,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1):
                       new_list.append(l1[i])
                       new_list.append(l2[i])
       if len(self.card_list) % 2 == 1 #odd
           new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26307,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1 #odd
            new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26308,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1):
                       new_list.append(l1(i))
                       new_list.append(l2(i))
        if len(self.card_list) % 2 == 1 #odd
           new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26309,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:]
        #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1):
           new_list.append(l1(i))
           new_list.append(l2(i))
        if len(self.card_list) % 2 == 1 #odd
           new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26310,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1 #odd
           new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26311,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1):
           new_list.append(l1[i])
           new_list.append(l2[i])
       if len(self.card_list) % 2 == 1 #odd
           new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26312,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
           new_list.append(l1[i])
           new_list.append(l2[i])
       if len(self.card_list) % 2 == 1 #odd
           new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26313,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1 #odd
            new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26314,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:] #make a copy because lists are mutable  
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1: #odd
            new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26315,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[mid:]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1: #odd
            new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
26316,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):  
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1: #odd
            new_list.append(l2[-1])
        self.card_list = new_list
        
        

"
27311,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            new.append(lst1(i))
            new.append(lst2(i))
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        self.card_list = new
        return new
    
"
27312,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            new.append(lst1(i))
            new.append(lst2(i))
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        return new
    
"
27313,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            new.append(lst1(i))
            new.append(lst2(i))
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        
        return new
    
"
27314,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            new.append(lst1(i))
            new.append(lst2(i))
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        self.card_list =  new
    
"
27315,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        lst1 = self.card_list[:mid]
        lst2 = self.card_list[mid:]
        for i in range(len(lst1)):
            new.append(lst1[i])
            new.append(lst2[i])
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        self.card_list = new
    
"
27316,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        lst1 = self.card_list[:mid]
        lst2 = self.card_list[mid:]
        for i in range(len(lst1)):
            new.append(lst1(i))
            new.append(lst2(i))
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        self.card_list = new
    
"
28443,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append((i, j))
        return new
    
x = Deck.shuffle(Deck.card_list[1, 2, 3, 4, 5])
print(x)"
28446,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append(lst1[i])
                new.append(lst2[i])
        return new
x = Deck.shuffle()
print(x)"
28447,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        for i in range(len(self.card_list)):
            print(i)
            
"
28448,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append((i, j))
        return new
    
x = Deck.shuffle(Card.card_list[1, 2, 3, 4, 5])
print(x)"
28449,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        for i in range(len(self.card_list)):
            
            
"
28450,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        print(lst1, lst2)
                
            
"
28451,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):
                
                new.append(lst1[i], lst2[i])
"
28452,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):
                
                new.append(lst1[i])
                new.append(lst2[i])
"
28453,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):
                
                new.append(lst1[i])
                new.append(lst2[i])
        return new
Deck.shuffle([1, 2, 4, 5])"
28454,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append(lst1[i])
                new.append(lst2[i])
        return new
Deck.shuffle()"
28455,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):
                
                new.append(lst1[i])
                new.append(lst2[i])
        return new
"
28456,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append((i, j))
        return new"
28457,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append(lst1[i])
                new.append(lst2[i])
        return new
x = Deck.shuffle()
print(x)"
28458,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append(Card(i, j))
        return new"
28459,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) / 2]
        lst2 = self.card_list[len(self.card_list) / 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append(lst1[i])
                new.append(lst2[i])
        return new
x = Deck.shuffle()
print(x)"
28460,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append(Card(i, j))
        return new
x = Deck.shuffle()
print(x)"
28461,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        print(lst1)
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append((i, j))
        return new
    
"
28462,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        print(lst1.__str__())
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append((i, j))
        return new
    
"
28463,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        lst1 = self.card_list[:len(self.card_list) // 2]
        lst2 = self.card_list[len(self.card_list) // 2 :]
        print(type(lst1))
        for i in range(len(lst1)):
            for j in range(len(lst2)):  
                new.append((i, j))
        return new
    
"
28486,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        num = len(self.card_list) //2
        a = self.card_list[:num]
        b = self.card_list[num:]
        new_list = []
        for i in range(len(a)):
            new_list.append(a[i])
            new_list.append(b[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(b[-1])
        self.card_list = new_list

"
28761,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        for idx in range(len(self.card_list)):
            if idx // 2 == 0:
                deck1.append(str(self.card_list[idx]))
            else: 
                deck2.append(str(self.card_list[idx]))
        print(deck1)
        print(deck2)
            
            
        
        

"
28762,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        for idx in range(len(self.card_list)):
            if idx // 2 == 0:
                deck1.append(self.card_list[idx])
            else: 
                deck2.append(self.card_list[idx])
        print(deck1)
        print(deck2)
            
            
        
        

"
28764,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        deck_len = len(self.card_list)
        
        for idx in range(len(self.card_list) // 2):
            deck1.append(str(self.card_list[idx]))
            
        for idx in range(deck_len - (len(self.card_list) // 2)):
             deck2.append(str(self.card_list[idx]))
                
        print(deck1)
        print(deck2)
        
        
            
            
        
        

"
28765,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        new_deck = []
        deck_len = len(self.card_list)
        
        for idx in range(len(self.card_list) // 2):
            deck1.append(str(self.card_list[idx]))
            
        for idx in range(deck_len - (len(self.card_list) // 2)):
             deck2.append(str(self.card_list[idx]))
                
        for idx in range(len(deck2)):
            new_deck.append(deck1[idx])
            new_deck.append(deck2[idx])
            
        #print(deck1)
        #print(deck2)
        print(new_deck)
        
        
            
            
        
        

"
28766,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
            
        self.card_list = new_list
        
        
            
            
        
        

"
28767,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_lst = []
        
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        
        if len(self.card_list) % 2 == 1:
            new_lst.append(l2[-1])
        self.card_lst = new_list
        
        #deck1 = []
        #deck2 = []
        #new_deck = []
        #deck_len = len(self.card_list)
        
        #for idx in range(len(self.card_list) // 2):
            #deck1.append(str(self.card_list[idx]))
            
        #for idx in range(deck_len - (len(self.card_list) // 2)):
             #deck2.append(str(self.card_list[idx]))
                
        #for idx in range(len(deck2)):
            #new_deck.append(deck1[idx])
            #new_deck.append(deck2[idx])
            
        #print(deck1)
        #print(deck2)
        #print(new_deck)
        
        
            
            
        
        

"
28768,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_lst = []
        
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        
        if len(self.card_list) % 2 == 1:
            new_lst.append(l2[-1])
            
        self.card_lst = new_lst
        
        #deck1 = []
        #deck2 = []
        #new_deck = []
        #deck_len = len(self.card_list)
        
        #for idx in range(len(self.card_list) // 2):
            #deck1.append(str(self.card_list[idx]))
            
        #for idx in range(deck_len - (len(self.card_list) // 2)):
             #deck2.append(str(self.card_list[idx]))
                
        #for idx in range(len(deck2)):
            #new_deck.append(deck1[idx])
            #new_deck.append(deck2[idx])
            
        #print(deck1)
        #print(deck2)
        #print(new_deck)
        
        
            
            
        
        

"
28770,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        
        if len(self.card_list) % 2 == 1:
            new_lst.append(l2[-1])
            
        self.card_lst = new_list
        
        #deck1 = []
        #deck2 = []
        #new_deck = []
        #deck_len = len(self.card_list)
        
        #for idx in range(len(self.card_list) // 2):
            #deck1.append(str(self.card_list[idx]))
            
        #for idx in range(deck_len - (len(self.card_list) // 2)):
             #deck2.append(str(self.card_list[idx]))
                
        #for idx in range(len(deck2)):
            #new_deck.append(deck1[idx])
            #new_deck.append(deck2[idx])
            
        #print(deck1)
        #print(deck2)
        #print(new_deck)
        
        
            
            
        
        

"
28771,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        
        if len(self.card_list) % 2 == 1:
            new_lst.append(l2[-1])
            
        self.card_lst = new_list
        
        
            
            
        
        

"
28772,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
            
        self.card_lst = new_list
        
        
            
            
        
        

"
29519,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        if len(l2) > len(l1):
            for i in range(len(l1)):
                l3.append(l1[i])
                l3.append(l2[i])
        l3.append(l2[-1])
        self.card_list = l3
        

"
29520,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)
            l3.append(l1[i])
            l3.append(l2[i])
        self.card_list = l3
        

"
29521,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1):
            l3.append(l1[i])
            l3.append(l2[i])
        self.card_list = l3
        

"
29522,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        if len(l1) > len(l2):
            for i in range(len(l1):
                l3.append(l1[i])
                l3.append(l2[i])
        self.card_list = l3
        

"
29523,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        #if len(l1) > len(l2):
            for i in range(len(l1)):
                l3.append(l1[i])
                l3.append(l2[i])
        #l3.append(l2[-1])
        self.card_list = l3
        

"
29524,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        if len(l1) > len(l2):
            for i in range(len(l1)):
                l3.append(l1[i])
                l3.append(l2[i])
        self.card_list = l3
        

"
29525,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        #if len(l1) > len(l2):
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        self.card_list = l3
        

"
29526,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        if len(l2) > len(l1):
            for i in range(len(l1)):
                l3.append(l1[i])
                l3.append(l2[i])
        #l3.append(l2[-1])
        self.card_list = l3
        

"
29527,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        if len(l1) > len(l2):
            for i in range(len(l1)):
                l3.append(l1[i])
                l3.append(l2[i])
        #l3.append(l2[-1])
        self.card_list = l3
        

"
29528,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        #if len(l1) > len(l2):
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        #l3.append(l2[-1])
        self.card_list = l3
        

"
29529,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        #if len(l1) > len(l2):
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
        

"
30285,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first = self.card_list[:len(self.card_list)//2]
        second = self.card_list[len(self.card_list)//2:]
        new = []
        for i in range(len(second)):
            if i < len(first):
                new.append(first[i])
            new.append(second[i])
        return new"
30286,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first = self.card_list[:len(card_list)//2]
        second = self.card_list[len(card_list)//2:]
        new = []
        for i in range(len(second)):
            if i < len(first):
                new.append(first[i])
            new.append(second[i])
        return new"
30287,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self)
        first = card_list[:len(card_list)//2]
        second = card_list[len(card_list)//2:]
        new = []
        for i in range(len(second)):
            if i < len(first):
                new.append(first[i])
            new.append(second[i])
"
30288,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first = card_list[:len(card_list)//2]
        second = card_list[len(card_list)//2:]
        new = []
        for i in range(len(second)):
            if i < len(first):
                new.append(first[i])
            new.append(second[i])
        return new"
30289,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        first = self.card_list[:len(self.card_list)//2]
        second = self.card_list[len(self.card_list)//2:]
        new = []
        for i in range(len(second)):
            if i < len(first):
                new.append(first[i])
            new.append(second[i])
        self.card_list = new"
31155,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range (len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
                

"
31175,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
"
32610,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lst1 = self.card_list[0:len(self.card_list)//2]
        lst2 = self.card_list[len(self.card_list)//2:]
        new_lst = lst1 + lst2

"
32617,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:] 
        newdeck = []
        for i in range(len(list1)):
            newdeck.append(list1[i])
            newdeck.append(list2[i])
        return newdeck 
            

"
32619,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:] 
        newdeck = []
        for i in range(len(list1)):
            newdeck.append(list1[i])
            newdeck.append(list2[i])
        for each card in newdeck:
            print(card)
        return newdeck 
            

"
32620,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:] 
        newdeck = []
        for i in range(len(list1)):
            newdeck.append(list1[i])
            newdeck.append(list2[i])
        for card in newdeck:
            print(card)
        return newdeck 
            

"
32621,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:] 
        newdeck = []
        for i in range(len(list1)):
            newdeck.append(list1[i])
            newdeck.append(list2[i])
        print(newdeck)
        return newdeck 
            

"
32622,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2 + 1:] 
        newdeck = []
        for i in range(len(list1)):
            newdeck.append(list1[i])
            newdeck.append(list2[i])
        for card in newdeck:
            print(card)
        return newdeck 
            

"
32624,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        list1 = self.card_list[:len(self.card_list)//2]
        list2 = self.card_list[len(self.card_list)//2:] 
        newdeck = []
        for i in range(len(list1)):
            newdeck.append(list1[i])
            newdeck.append(list2[i])
        for card in newdeck:
            print(card)
        return newdeck 
            

"
32627,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        list1 = self.card_list[:mid]
        list2 = self.card_list[mid:] 
        newdeck = []
        for i in range(len(list1)):
            newdeck.append(list1[i])
            newdeck.append(list2[i])
        if len(self.card_list) % 2 == 1:
            newdeck.append(list2[-1])
        self.card_list = newdeck
            

"
33178,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
        
"
33717,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle (self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)): 
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len (l1): 
            l3.append(l2[-1])
        self.card_list = l3
                        
        
        

"
34494,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list

"
35815,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
35840,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = 13
        
"
35841,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[mid:]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = 13

"
35842,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = 13

"
35843,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            print(L1[i])
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = 13
        
"
35844,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = 13
        
"
35845,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            print(i)
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = 13
        
"
35846,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[i])
        self.card_list = 13
        
"
35847,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
            self.card_list = 13
        if len(L2) > len(L1):
            L3.append(L2[-1])
            self.card_list = 13
        
        
        
"
35848,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        
        
self.card_list = 13
        
"
35849,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = 13
        
        
        
"
35850,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
            self.card_list = 13
        
        
        
"
35851,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
            self.card_list = 13
        
        
        
"
35852,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = 13
        
        
        
"
35853,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
            self.card_list = 13
        
        
        
"
35854,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = 13
        
        
        
"
35855,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range (len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
            self.card_list = 13
        
        
        
"
35856,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range(len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(L2) > len(L1):
            L3.append(L2[-1])
            self.card_list = 13
        
        
        
"
35857,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range(len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(self.card_list) % 2 == 1:
            L3.append(L2[-1])
        if len(L2) > len(L1):
            L3.append(L2[-1])
        self.card_list = L3
        
        
        
"
35858,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit = 0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        L3 = []
        for i in range(len(L1)):
            L3.append(L1[i])
            L3.append(L2[i])
        if len(self.card_list) % 2 == 1:
            L3.append(L2[-1])
        self.card_list = L3
        
        
        
"
37594,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
37596,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
38062,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[:mid]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
            self.card_list = 13
"
38063,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[:mid]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = 13
"
38064,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[:mid]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
            self.card_list = l3
"
38271,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(1,len(evenlist)):
            for j in range(1,len(oddlist)):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38272,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finiallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(len(evenlist)):
            for j in range(len(oddlist)):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38273,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(len(evenlist)):
            for j in range(len(oddlist)):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38274,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finiallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(evenlist):
            for j in range(oddlist):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38289,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
38291,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0 or if i == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(1,len(evenlist)):
            for j in range(1,len(oddlist)):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38292,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0 or i == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(0,len(evenlist)-1):
            for j in range(0,len(oddlist)-1):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38293,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0 or if i == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(0,len(evenlist)):
            for j in range(0,len(oddlist)):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38294,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        evenlist = []
        oddlist = []
        finallist = []
        for i in range(len(self.card_list)):
            if i % 2 == 0 or if i == 0:
                evenlist.append(self.card_list[i])
            else:
                oddlist.append(self.card_list[i])
        for i in range(0,len(evenlist)-1):
            for j in range(0,len(oddlist)-1):
                finallist.append(evenlist[i])
                finallist.append(oddlist[j])
        return finallist        
                

"
38295,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) // 2
        for i in range(size):
            firstlist.append(self.card_list[i])
        for i in range(size):
            i = -1
            secondlist.append(self.card_list[i])
        "
38296,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size1 = len(self.card_list) // 2
        size2 = size1 + 1
        for i in range(size1):
            firstlist.append(self.card_list[i])
        for i in range(size2):
            i = -1
            secondlist.append(self.card_list[i])
        for i in range(size1):
                finallist.append(firstlist[i])
        for i in range(size2):
                finallist.append(secondlist[i])  
        return finallist
        "
38297,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) / 2
        for i in range(size):
            firstlist.append(self.card_list[i])
        for i in range(size):
            i = -1
            secondlist.append(self.card_list[i])
        for i in range(size):
                finallist.append(firstlist[i]
        "
38298,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) / 2
        for i in range(size):
            firstlist.append(self.card_list[i])
        for i in range(size):
            i = -1
            secondlist.append(self.card_list[i])
        for i in range(size):
                finallist.append(firstlist[i])
        for i in range(size):
                finallist.append(secondlist[i])        
        "
38299,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size1 = len(self.card_list) // 2
        size2 = size1 + 1
        for i in range(size1):
            firstlist.append(self.card_list[i])
        for i in range(size2):
            i = -1
            secondlist.append(self.card_list[i])
        for i in range(size1):
                finallist.append(firstlist[i])
        for i in range(size2):
                finallist.append(secondlist[i])        
        "
38300,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) // 2
        firstlist = self.card_list[:mid]
        secondlist = self.card_list[mid:]
        for i in range(len(firstlist)):
            finallist.append(firstlist[i])
            finallist.append(secondlist[i])"
38301,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) // 2
        firstlist = self.card_list[:size]
        secondlist = self.card_list[size:]
        for i in range(len(firstlist)):
            finallist.append(firstlist[i])
            finallist.append(secondlist[i])
        if len(self.card_list) % 2 == 1
            finallist.append(secondlist[-1])
        return finallist"
38303,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) // 2
        firstlist = self.card_list[:mid]
        secondlist = self.card_list[mid:]
        for i in range(len(firstlist)):
            finallist.append(firstlist[i])
            finallist.append(secondlist[i])
        return finallist"
38304,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) // 2
        firstlist = self.card_list[:size]
        secondlist = self.card_list[size:]
        for i in range(len(firstlist)):
            finallist.append(firstlist[i])
            finallist.append(secondlist[i])
        return finallist"
38305,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) // 2
        firstlist = self.card_list[:size]
        secondlist = self.card_list[size:]
        for i in range(len(firstlist)):
            finallist.append(firstlist[i])
            finallist.append(secondlist[i])
        if len(self.card_list) % 2 == 1:
            finallist.append(secondlist[-1])
        return finallist"
38306,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        firstlist = []
        secondlist = []
        finallist = []
        size = len(self.card_list) // 2
        firstlist = self.card_list[:size]
        secondlist = self.card_list[size:]
        for i in range(len(firstlist)):
            finallist.append(firstlist[i])
            finallist.append(secondlist[i])
        if len(self.card_list) % 2 == 1:
            finallist.append(secondlist[-1])
        self.card_list = finallist"
38833,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        num = len(self.card_list) //2
        a = self.card_list[:num]
        b = self.card_list[num:]
        new_list = []
        for i in range(len(a)):
            new_list.append(a[i])
            new_list.append(b[i])
        if len(self.card_list) %2 ==1:
            new_list.append(b[-1])
        self.card_list = new_list
                           
"
38834,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        num = len(self.card_list) //2
        a = self.card_list[:num]
        b = self.card_list[num:]
        new_list = []
        for card in range(len(a)):
            new_list.append(a[i])
            new_list.append(b[i])
        if len(self.card_list) %2 ==1:
            new_list.append(b[-1]
        self.card_list = new_list
                           
"
38835,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        num = len(self.card_list) //2
        a = self.card_list[:num]
        b = self.card_list[num:]
        new_list = []
        for card in range(len(a)):
            new_list.append(a[i])
            new_list.append(b[i])
        if len(self.card_list) %2 ==1:
            new_list.append(b[-1])
        self.card_list = new_list
                           
"
39507,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_lst = []
        for i in range(len(l1)):
            new_lst.append(l1[i])
            new_lst.append(l2[i])
        if len(self.card_list) %2 == 1:
            new_lst.append(l2[-1])
        self.card_list = new_lst
            
            
"
39508,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
39509,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_lst = []
        for i in range(len(self.new_list)):
            new_lst.append(l1[i])
            new_lst.append(l2[i])
        if len(self.card_list)%2 == 1:
            new_lst.append(l2[-1])
        self.card_list = new_lst

        "
39563,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
39939,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        sec_half = self.card_list[mid:]
        
        new_list = []
        for i in range(len(self.card_list)):
            new_list.append(first_half[i])
            new_list.append(sec_half[i])
        return new_list

"
39940,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        sec_half = self.card_list[mid:]
        
        new_list = []
        for i in range(len(first_half)):
            new_list.append(first_half[i])
            new_list.append(sec_half[i])
        return new_list

"
39941,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) / 2
        first_half = self.card_list[:mid]
        sec_half = self.card_list[mid:]
        
        new_list = []
        for i in range(len(self.card_list)):
            new_list.append(first_half[i])
            new_list.append(sec_half[i])
        return new_list

"
39942,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        sec_half = self.card_list[mid:]
        
        new_list = []
        for i in range(len(self.card_list)):
            new_list.append(first_half[i])
            new_list.append(sec_half[i])
        return new_list

"
39943,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):

        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
            
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        
        self.card_list = new_list

"
40476,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        lst1 = self.card_list[:mid]
        lst2 = self.card_list[mid:]
        new_list = []
        for i in range(len(lst1)):
            new_list.append(lst1[i])
            new_list.append(lst2[i])
        if len(self.card_list) % 2 ==1: 
            new_list.append(lst2[-1])
        self.card_list = new_list
               
            
            

"
40477,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        lst1 = self.card_list[:mid]
        lst2 = self.card_list[mid:]
        new_list = []
        for i in range(len(lst1)):
            new_list.append(lst1[i])
            new_list.append(lst2[i])
        if len(self.card_list) % 2 ==1: 
            new_list.append(lst2[-1])
        return new_list        
            
            
            

"
40478,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        lst1 = self.card_list[:mid]
        lst2 = self.card_list[mid:]
        new_list = []
        for i in range(len(lst1)):
            new_list.append(lst1[i])
            new_list.append(lst2[i])
        if len(self.card_list) % 2 ==1: 
            new_list.append(lst2[-1])
        self.card_list new_list
               
            
            

"
42192,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) //2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
"
42193,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) //2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i]_
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
"
42429,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lis1=[]
        lis2=[]
        for items in self.card_list: 
            if len(self.card_list)>len(self.card_list)//2: 
                lis1.append(items)
            else: 
                lis2.append(items)
        print(lis1)
        print(lis2)

"
42433,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        for items in self.card_list: 
            print(items)

"
42434,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lis1=[]
        lis2=[]
        for items in self.card_list: 
            if len(card_list)>len(card_list)//2: 
                lis1.append(items)
            else: 
                lis2.append(items)

"
42435,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lis1=[]
        lis2=[]
        for items in self.card_list: 
            if len(card_list)>len(card_list)//2: 
                lis1.append(items)
            else: 
                lis2.append(items)
        print(lis1)
        print(lis2)

"
42440,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for card in range(len(l1)): 
            lis.append(l1[i])
            lis.append(l2[i])
        if len self.card_list=1: 
            lis.append(l2[-1])
        self.card_list=lis

"
42443,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l1)): 
            lis.append(l1[i])
            lis.append(l2[i])
        if len(self.card_list)%2==1: 
            lis.append(l2[-1])
        self.card_list=lis

"
42445,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l1)): 
            lis.append(l1[i])
            lis.append(l2[i])
        if len self.card_list%2==1: 
            lis.append(l2[-1])
        self.card_list=lis

"
42449,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for card in range(len(l1)): 
            lis.append(l1[i])
            lis.append(l2[i])
        if len self.card_list==1: 
            lis.append(l2[-1])
        self.card_list=lis

"
42608,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
44205,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
print(output)
        
   
        

"
44219,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
44291,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
            lis1=[]
            lis2=[]
            fin=[]
            for i in self.card_list:
                if i%2:
                    lis2.append(i)
                else:
                    lis1.append(i)
            x=0
            for i in self.card_list:
                fin.append(lis1[x])
                fin.append(lis2[x])
                x+=1
            return fin"
44306,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l1)):
            lis.append(l1[i])
            lis.append(l2[i])
        if len(self.card_list)%2==1:
            lis.append(12[-1])
        self.card_list=lis"
44308,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
            lis=[]
            mid=len(self.card_list)//2
            l1=self.card_list[:mid]
            l2=self.card_list[mid:]
            for i in range(len(11)):
                lis.append(l1[i])
                lis.append(l2[i])
            if len(self.card_list)%2==1:
                lis.append(12[-1])
            self.card_list=lis"
44309,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    
    def shuffle(self):
            lis=[]
            mid=len(self.card_list)//2
            l1=self.card_list[:mid]
            l2=self.card_list[mid:]
            for i in range(len(11)):
                lis.append(l1[i])
                lis.append(l2[i])
            if len(self.card_list)%2==1:
                lis.append(12[-1])
            self.card_list=lis"
44310,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(11)):
            lis.append(l1[i])
            lis.append(l2[i])
        if len(self.card_list)%2==1:
            lis.append(12[-1])
        self.card_list=lis"
44311,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l2)):
            lis.append(l1[i])
            lis.append(l2[i])
        if len(self.card_list)%2==1:
            lis.append(12[-1])
        self.card_list=lis"
44312,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    
    def shuffle(self):
        lis=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l1)):
            lis.append(l1[i])
            lis.append(l2[i])
        if len(self.card_list)%2==1:
            lis.append(12[-1])
        self.card_list=lis"
44937,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        new_list = [self.card_list[i:i + mid] for i in range(0, len(self.card_list), mid)]
        

"
44938,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for i in range(0, len(second_half)):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
                            

"
44939,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for i in range(0, len(second_half)):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
        return new_list
                            

"
44943,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for i in range(0, len(second_half)):
            if (i < len(first_half):
                new_list.append(first_half[i])
            if (i < len(second_half):
                new_list.append(second_half[i])
            self.card_list = new_list
        return self.card_list
                            

"
44945,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for i in range(0, len(second_half)):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
            self.card_list = new_list
        return self.card_list
                            

"
45395,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list//2)
        halfone = self.card_list[:mid]
        halftwo = self.card_list[mid:]
        self.shuffled = []
        for i in range(len(halfone)):
            shuffled.append(halfone[i])
            shuffled.append(halftwo[i])
        return self.shuffled

"
45397,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        halfone = self.card_list[:mid]
        halftwo = self.card_list[mid:]
        self.shuffled = []
        for i in range(len(halfone)):
            shuffled.append(halfone[i])
            shuffled.append(halftwo[i])
        return self.shuffled

"
45398,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list//2)
        halfone = self.card_list[:mid]
        halftwo = self.card_list[mid:]
        shuffled = []
        for i in range(len(halfone)):
            shuffled.append(halfone[i])
            shuffled.append(halftwo[i])
        return shuffled

"
45399,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        halfone = self.card_list[:mid]
        halftwo = self.card_list[mid:]
        self.shuffled = []
        for i in range(len(halftwo)):
            self.shuffled.append(halfone[i])
            self.shuffled.append(halftwo[i])
        return self.shuffled

"
45400,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        halfone = self.card_list[:mid]
        halftwo = self.card_list[mid:]
        self.shuffled = []
        for i in range(len(halfone)):
            self.shuffled.append(halfone[i])
            self.shuffled.append(halftwo[i])
        return self.shuffled

"
45401,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        halfone = self.card_list[:mid]
        halftwo = self.card_list[mid:]
        self.shuffled = []
        for i in range(len(halfone)):
            self.shuffled.append(halfone[i])
            self.shuffled.append(halftwo[i])
        return self.shuffled

"
45402,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        half1 = self.card_list[:mid]
        half2 = self.card_list[mid:]
        shuffled = []
        for i in range(len(half1)):
            shuffled.append(half1[i])
            shuffled.append(half2[i])
        return shuffled

"
45403,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        half1 = self.card_list[:mid]
        half1 = self.card_list[mid:]
        shuffled = []
        for i in range(len(half1)):
            shuffled.append(halfone[i])
            shuffled.append(halftwo[i])
        return shuffled

"
45404,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        half1 = self.card_list[:mid]
        half2 = self.card_list[mid:]
        shuffled = []
        for i in range(len(half1)):
            shuffled.append(half1[i])
            shuffled.append(half2[i])
        if len(self.card_list)% 2 == 1:
            shuffled.append(half2[-1])
        return shuffled

"
45405,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        half1 = self.card_list[:mid]
        half2 = self.card_list[mid:]
        shuffled = []
        for i in range(len(half1)):
            shuffled.append(half1[i])
            shuffled.append(half2[i])
        if len(self.card_list)% 2 == 1:
            shuffled.append(half2[-1])
        self.card_list = shuffled

"
46421,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
46422,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        size = len(self.card_list) // 2
        first_list = self.card_list[:size]
        second_list = self.card_list[size:]
        new_list = []
        for i in range(len(first_list)):
            new_list.append(first_list[i])
            new_list.append(second_list[i])
        if len(second_list)%2 == 1:
            new_list.append(second_list[-1])
        self.card_list = new_list
            
        

"
46427,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        size = len(self.card_list) // 2
        first_list = self.card_list[:size]
        second_list = self.card_list[size:]
        new_list = []
        for i in range(len(first_list)):
            new_list.append(first_list[i])
            new_list.append(second_list[i])
        if len(second_list)%2 == 1:
            new_list.append(second_list[-1])
        return new_list
            
        

"
46451,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        size = len(card_list) // 2
        list = []
        first_half = self.card_list[:size]
        second_half = self.card_list[size:]
        for i in range(len(first_half)):
            list.append(first_half[i])
            list.append(second_half[i])
        if len(self.card_list)%2 == 1:
            list.append(self.card_list[-1])
        self.card_list = list
        return self.card_list
            
        

"
46453,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        size = len(card_list) // 2
        list = []
        first_half = self.card_list[:size]
        second_half = self.card_list[size:]
        for i in range(len(first_half)):
            list.append(first_half[i])
            list.append(second_half[i])
        if len(self.card_list)%2 == 1:
            list.append(self.card_list[-1])
        return list
            
        

"
46454,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        size = len(self.card_list) // 2
        list = []
        first_half = self.card_list[:size]
        second_half = self.card_list[size:]
        for i in range(len(first_half)):
            list.append(first_half[i])
            list.append(second_half[i])
        if len(self.card_list)%2 == 1:
            list.append(self.card_list[-1])
        self.card_list = list
        return self.card_list
            
        

"
47236,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_card_list = []
        x = len(self.card_list)//2
        for i in range(len(self.card_list)//2):
            new_card_list.append(self.card_list[i])
            new_card_list.append(self.card_list[i+x])
            
        if len(self.card_list)%2 != 0:
            new_card_list.append(self.card_list[len(self.card_list)-1])
        
        for m in range(len(self.card_list)):
            self.card_list[m] = new_card_list[m]
            
       
        
               
     
"
47237,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_card_list = []
        x = len(self.card_list)//2
        for i in range(len(self.card_list)//2):
            new_card_list.append(self.card_list[i])
            new_card_list.append(self.card_list[i+x])
            
        if len(self.card_list)%2 != 0:
            new_card_list.append(self.card_list[len(card_list)-1])
        
        for m in range(len(self.card_list)):
            self.card_list[m] = new_card_list[m]
            
       
        
               
     
"
47238,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_card_list = []
        x = len(self.card_list)//2
        for i in range(len(self.card_list)//2):
            new_card_list.append(self.card_list[i])
            new_card_list.append(self.card_list[i]+x)
            
        if len(self.card_list)%2 != 0:
            new_card_list.append(self.card_list[len(card_list)-1])
        
        for m in range(len(self.card_list)):
            card_list[m] = new_card_list[m]
            
       
        
               
     
"
47239,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_card_list = []
        x = len(self.card_list)/2
        for i in range(len(self.card_list)/2):
            new_card_list.append(self.card_list[i])
            new_card_list.append(self.card_list[i]+x)
            
        if len(self.card_list)%2 != 0:
            new_card_list.append(self.card_list[len(card_list)-1])
        
        for m in range(len(self.card_list)):
            card_list[m] = new_card_list[m]
            
       
        
               
     
"
47240,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_card_list = []
        x = len(self.card_list)//2
        for i in range(len(self.card_list)//2):
            new_card_list.append(self.card_list[i])
            new_card_list.append(self.card_list[i+x])
            
        if len(self.card_list)%2 != 0:
            new_card_list.append(self.card_list[len(card_list)-1])
        
        for m in range(len(self.card_list)):
            card_list[m] = new_card_list[m]
            
       
        
               
     
"
47241,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
47284,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
        

"
48015,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        cards = self.card_list
        deck1 = cards[0 : (len(cards) // 2)]
        deck2 = cards[(len(cards) // 2) : len(cards)]
        shuffled_deck = []
        for i in range(len(deck1)):
            shuffled_deck.append(deck1[i])
            shuffled_deck.append(deck2[i])
        return shuffled_deck
                      
    
    


"
48035,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        cards = self.card_list
        deck1 = cards[0 : (len(cards) // 2)]
        deck2 = cards[(len(cards) // 2) : len(cards)]
        shuffled_deck = []
        for i in range(len(deck1)):
            shuffled_deck.append(deck1[i])
            shuffled_deck.append(deck2[i])
        return shuffled_deck
                      
    
    


"
48036,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        cards = self.card_list
        deck1 = cards[0 : (len(cards) // 2)]
        deck2 = cards[(len(cards) // 2) : len(cards)]
        shuffled_deck = []
        for i in range(len(deck1) + 1):
            shuffled_deck.append(deck1[i])
            shuffled_deck.append(deck2[i])
        return shuffled_deck
                      
    
    


"
48040,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = (len(self.card_list) // 2) + 1
        new_deck = []
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.append(deck1[i])
            new_deck.append(deck2[i])
            
        return new_deck
            
            
            

"
48041,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = (len(self.card_list) / 2)
        new_deck = []
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.append(deck1[i])
            new_deck.append(deck2[i])
            
        return new_deck
            
            
            

"
48042,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = (len(self.card_list) // 2) - 2
        new_deck = []
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.append(deck1[i])
            new_deck.append(deck2[i])
            
        return new_deck
            
            
            

"
48043,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self.card_list):
        half = (len(self.card_list) / 2)
        new_deck = []
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.append(deck1[i])
            new_deck.append(deck2[i])
            
        return new_deck
            
            
            

"
48044,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = (len(self.card_list) // 2)
        new_deck = []
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.append(deck1[i])
            new_deck.append(deck2[i])
            
        return new_deck
            
            
            

"
48045,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = (len(self.card_list) // 2) - 1
        new_deck = []
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.append(deck1[i])
            new_deck.append(deck2[i])
            
        return new_deck
            
            
            

"
48046,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = (len(self.card_list) // 2) - 1
        new_deck = Deck()
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.append(deck1[i])
            new_deck.append(deck2[i])
            
        return new_deck
            
            
            

"
48047,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = (len(self.card_list) // 2) - 1
        new_deck = Deck()
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        for i in range(half):
            new_deck.card_list.append(deck1[i])
            new_deck.card_list.append(deck2[i])
            
        return new_deck
            
            
            

"
48511,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
49079,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list // 2)
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
49080,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
49097,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) //2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
49375,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
   
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list(mid)
        l2 = self.card_list(mid)
        new_list = []
        for i in range(len(l1)): 
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
            self.card_list = new_list
        

"
49377,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
   
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)): 
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
            self.card_list = new_list
        

"
49378,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
   
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list(:mid)
        l2 = self.card_list(mid:)
        new_list = []
        for i in range(len(l1)): 
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
            self.card_list = new_list
        

"
49379,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
   
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mi]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)): 
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
            self.card_list = new_list
        

"
49380,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
   
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)): 
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
        

"
50555,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
            
"
50556,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        for c in l1:
            for a in l2:
               
                newLst.append(c)
                newLst.append(a)
        return newLst
     
            
"
50557,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
            
"
50558,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        for i in range(0, len(l1):
            for a in range(0, len(l2):
                
                newLst.append(c)
                newLst.append(a)
        return newLst
     
            
"
50559,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid-1]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:mid-1]
            l2 = self.card_list[mid:]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
            
"
50560,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:mid-1]
            l2 = self.card_list[mid:]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
            
"
50561,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
Deck d1
d1.shuffle()
"
50562,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:(mid-1)]
            l2 = self.card_list[(mid-1):]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
Deck d1
d1.__init__()
d1.shuffle()
"
50563,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:(mid-1)]
            l2 = self.card_list[(mid-1):]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
Deck d1
d1.shuffle()
"
50564,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        for i in self.card_list:
            print(i)
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:(mid-1)]
            l2 = self.card_list[(mid-1):]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     

"
50565,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        for i in self.card_list:
            print(i)
        newLst = []
        mid = len(self.card_list) // 2
        if len(self.card_list) % 2 != 0:
            l1 = self.card_list[:mid]
            l2 = self.card_list[mid:]
        else:
            l1 = self.card_list[:(mid-1)]
            l2 = self.card_list[(mid-1):]
        for c in l1:
            for a in l2:
                newLst.append(c)
                newLst.append(a)
        return newLst
     
Deck d1
d1.__init__()
d1.shuffle()
"
50600,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)): 
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list

"
50719,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
50828,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))
    def shuffle(self):
        

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
50829,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))
    def shuffle(self):
        half = len(self.card_list) // 2
        print(half)
        
        

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
50830,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))
    def shuffle(self):
        half = len(self.card_list) // 2
        list_one = self.card_list[:half]
        list_two = self.card_list[half:]
        print(list_one)
        print(list_two)
        
        

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
50831,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))
    def shuffle(self):
        half = len(self.card_list) // 2
        list_one = self.card_list[:half]
        list_two = self.card_list[half:]

        

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
52534,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        
        self.first_half = self.card_list[:middle_index]
        self.second_half = self.card_list[middle_index:]
        
        for i in range(len(self.first_half)):
            if (i < len(self.first_half):
                new_list.append(self.first_half[i])
                
            if (i < len(self.second_half):
                new_list.append(self.second_half[i])
                
        card_list = new_list

"
52535,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(first_half)):
            if (i < len(first_half):
                new_list.append(first_half[i])
                
            if (i < len(second_half):
                new_list.append(second_half[i])
                
       return new_list

"
52539,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(first_half)):
            if (i < len(first_half)):
                new_list.append(first_half[i])
                
            if (i < len(second_half)):
                new_list.append(second_half[i])
                
        return new_list

"
52540,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(second_half)):
            if (i < int(len(first_half))):
                new_list.append(first_half[i])
                
            if (i < len(second_half)):
                new_list.append(second_half[i])
                
        return new_list

"
52541,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        
        self.first_half = self.card_list[:middle_index]
        self.second_half = self.card_list[middle_index:]
        
        for i in range(len(self.first_half)):
            if (i !> (len(self.first_half) - 1):
                new_list.append(self.first_half[i])
                
            if (i !> (len(self.second_half) - 1):
                new_list.append(self.second_half[i])
                
        card_list = new_list

"
52542,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(second_half)):
            if (i < len(first_half)):
                new_list.append(first_half[i])
                
            if (i < len(second_half)):
                new_list.append(second_half[i])
                
        return new_list

"
52543,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        
        self.first_half = self.card_list[:middle_index]
        self.second_half = self.card_list[middle_index:]
        
        for i in range(len(self.first_half)):
            if (i < (len(self.first_half)):
                new_list.append(self.first_half[i])
                
            if (i < (len(self.second_half)):
                new_list.append(self.second_half[i])
                
        card_list = new_list

"
52544,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(first_half)):
            if (i < len(first_half)):
                new_list.append(first_half[i])
                
            if (i < len(second_half)):
                new_list.append(second_half[i])
                
       return new_list

"
52545,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        
        self.first_half = self.card_list[:middle_index]
        self.second_half = self.card_list[middle_index:]
        
        for i in range(len(self.first_half)):
            if (int(i) < (len(self.first_half)):
                new_list.append(self.first_half[i])
                
            if (i < (len(self.second_half)):
                new_list.append(self.second_half[i])
                
        card_list = new_list

"
52546,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        
        self.first_half = self.card_list[:middle_index]
        self.second_half = self.card_list[middle_index:]
        
        for i in range(len(self.first_half)):
            if (i < len(self.first_half):
                new_list.append(self.first_half[i])
                
            if (i < len(self.second_half):
                new_list.append(self.second_half[i])
                
       return new_list

"
52547,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(first_half)):
            if (i < len(first_half):
                new_list.append(first_half[i])
                
            if (i < len(second_half):
                new_list.append(second_half[i])
                
       return new_list

"
52548,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
"
52549,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(second_half)):
            if (i < len(first_half)):
                new_list.append(first_half[i])
                
            if (i < len(second_half)):
                new_list.append(second_half[i])
                
        return new_list

"
52550,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle_index = len(self.card_list) // 2
        new_list = []
        first_half = []
        second_half = []
        
        first_half = self.card_list[:middle_index]
        second_half = self.card_list[middle_index:]
        
        for i in range(len(second_half)):
            if (i < len(first_half)):
                new_list.append(first_half[i])
                
            if (i < len(second_half)):
                new_list.append(second_half[i])
                
        self.card_list = new_list

"
52569,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
        
        
            

"
52570,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
        return new_list
        
        
            

"
52571,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
        return self.card_list
        
        
            

"
52572,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
      
        
        
            

"
52573,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
      
        
        
            

"
52578,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
54605,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[0:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for x in range (len(l1)):
            new_list.append(l1[x])
            new_list.append(l1[x])
        if len(l2) > len(l1):
            new_list.append(l2[-1])
        self.card_list = new_list

"
54606,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        l1 = self.card_list[0:mid]
        l2 = self.card_list[mid:]
        for x in range (len(l1)):
            new_list.append(l1[x])
            new_list.append(l1[x])
        if len(l2) > len(l1):
            new_list.append(l2[-1])
        self.card_list = new_list

"
54607,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for x in range (len(l1)):
            new_list.append(l1[x])
            new_list.append(l2[x])
        if len(l2) > len(l1):
            new_list.append(l2[-1])
        self.card_list = new_list

"
54629,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
            
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
54707,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
55079,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55080,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        #for card in deck2:
            #print(card)
        newdeck = zip(deck1 , deck2)
        #for card in deck1:
            #print(card)
            #newdeck.append(card)
        return newdeck
"
55081,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        #for card in deck2:
            #print(card)
        deck1.zip(deck2)
        #for card in deck1:
            #print(card)
            #newdeck.append(card)
        print(deck1)
        return deck1
"
55082,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        print(str(deck1))
        deck2 = self.card_list[(len(self.card_list)//2):]
        print(str(deck2))
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55083,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):    
        deck1 = []
        deck2 =[]
        for i in range(len(self.card_list//2)):
            deck1.append(self.card_list[i])
            deck2.append(self.card_list[i+26])
        newdeck = zip(deck1 , deck2)
        #for card in deck1:
            #print(card)
            #newdeck.append(card)
        print(newdeck)
        return newdeck
"
55084,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):    
        deck1 = []
        deck2 =[]
        for i in range(len(self.card_list)//2):
            deck1.append(self.card_list[i])
            deck2.append(self.card_list[i+26])
        newdeck = zip(deck1 , deck2)
        #for card in deck1:
            #print(card)
            #newdeck.append(card)
        print(newdeck)
        return newdeck
"
55085,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):    
        deck1 = []
        deck2 =[]
        for i in range(len(self.card_list)//2):
            deck1.append(self.card_list[i])
            deck2.append(self.card_list[i+25])
        newdeck = zip(deck1 , deck2)
        #for card in deck1:
            #print(card)
            #newdeck.append(card)
        print(newdeck)
        return newdeck
"
55086,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):    
        deck1 = []
        deck2 =[]
        for i in range(len(self.card_list)/2):
            deck1.append(self.card_list[i])
            deck2.append(self.card_list[i+26])
        newdeck = zip(deck1 , deck2)
        #for card in deck1:
            #print(card)
            #newdeck.append(card)
        print(newdeck)
        return newdeck
"
55087,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
            print(i)
        return newdeck
deck = Deck()
#print(deck)"
55088,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        print(self.card_list[:half])
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
            print(self.card_list[i])
        return newdeck
deck = Deck()
#print(deck)"
55089,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55090,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
            print(self.card_list[i])
        return newdeck
deck = Deck()
#print(deck)"
55091,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        print(self.card_list[half])
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
            print(self.card_list[i])
        return newdeck
deck = Deck()
#print(deck)"
55092,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        for i in deck2:
            print(i)
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55093,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(self.card_list[i])
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55094,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        print(deck2)
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55095,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        for i in deck2:
            print(i)
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55096,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        for i in deck2:
            print(i)
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        print(newdeck)
deck = Deck()
#print(deck)"
55097,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        for i in deck2:
            print(i)
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55098,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        for i in deck2:
            print(i)
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        print(newdeck)
        break
deck = Deck()
#print(deck)"
55099,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        for i in deck1:
            print(i)
        print(len(deck1))
        deck2 = self.card_list[half:]
        for i in deck2:
            print(i)
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        if len(deck2) % 2 == 1:
            newdeck.append(deck2[-1])
        return newdeck
deck = Deck()
#print(deck)"
55100,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        if len(deck2) % 2 == 1:
            newdeck.append(deck2[-1])
        self.card_list = newdeck
        return self.card_list
deck = Deck()
#print(deck)"
55101,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        if len(deck2) % 2 == 1:
            newdeck.append(deck2[-1])
        print(len(newdeck))
        for i in range(len(newdeck)):
            print(newdeck[i])
deck = Deck()
#print(deck)"
55102,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        if len(deck2) % 2 == 1:
            newdeck.append(deck2[-1])
        print(newdeck)
deck = Deck()
#print(deck)"
55103,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        if len(deck2) % 2 == 1:
            newdeck.append(deck2[-1])
        for i in range(len(newdeck)):
            print(newdeck[i])
deck = Deck()
#print(deck)"
55104,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        if len(deck2) % 2 == 1:
            newdeck.append(deck2[-1])
        self.card_list = newdeck
deck = Deck()
#print(deck)"
55105,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"",""2"",""3"",""4"",""5"",""6"",""7"", ""8"", ""9"",""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(len(deck1)):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        if len(deck2) % 2 == 1:
            newdeck.append(deck2[-1])
        self.card_list = newdeck"
55443,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        newdeck = []
        for i in range(len(deck)//2):
            #newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
"
55446,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
            

"
55448,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        #for card in deck2:
            #print(card)
        newdeck = []
        i = 0
        for card in deck1:
            newdeck.append(card)
            newdeck.append(deck2[i])
            i += 1
            print(newdeck)
        return newdeck
"
55449,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(deck)//2)]
        deck2 = self.card_list[(len(deck)//2):]
        for card in deck1:
            print(card)
        for card in deck2:
            print(card)
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55451,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck

print(d.card_list)"
55452,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(deck)//2)]
        deck2 = self.card_list[(len(deck)//2):]
        for card in deck1:
            print(card)
        for card in deck2:
            print(card)
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55454,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        #r = error
        return newdeck
deck = Deck()
deck.shuffle()
for card in deck:
    print(card)"
55455,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        for card in deck1:
            print(card)
        for card in deck2:
            print(card)
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55456,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        for card in deck1:
            print(card)
        for card in deck2:
            print(card)
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55457,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        print(str(deck1))
        print(str(deck2))
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
"
55458,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        print(deck1)
        print(deck2)
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
"
55459,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55460,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck = self.card_list
        deck1 = deck[:(len(deck)//2)]
        deck2 = deck[(len(deck)//2):]
        for card in deck1:
            print(card)
        
        newdeck = []
        for i in range(len(deck)//2):
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55461,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        for card in deck2:
            print(card)
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55462,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        #for card in deck2:
            #print(card)
        newdeck = []
        for i in range(len(deck1)):
            print(i)
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55463,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
print(deck)"
55464,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        #for card in deck2:
            #print(card)
        newdeck = []
        i = 0
        for card in deck1:
            newdeck.append(card)
            newdeck.append(deck2[i])
            i += 1
        return newdeck
"
55465,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        for card in deck1:
            #print(card)
        for card in deck2:
            #print(card)
        newdeck = []
        for i in range(len(self.card_list)//2):
            print(i)
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55466,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        #for card in deck2:
            #print(card)
        newdeck = []
        for i in range(len(self.card_list)//2):
            print(i)
            newdeck.append(deck2[i])
            newdeck.append(deck1[i])
        return newdeck
"
55467,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        #for card in deck1:
            #print(card)
        #for card in deck2:
            #print(card)
        newdeck = []
        for card in deck1:
            print(card)
            newdeck.append(card)
        return newdeck
"
55468,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
"
55469,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        newdeck = []
        for i in range(len(self.card_list)//2):
            print(i)
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
"
55470,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        for card in self.card_list:
            print(card)
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
"
55471,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = self.card_list[:(len(self.card_list)//2)]
        print(len(deck1))
        deck2 = self.card_list[(len(self.card_list)//2):]
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55472,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55473,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        for card in self.card_list:
            print(card)
        deck1 = self.card_list[:(len(self.card_list)//2)]
        deck2 = self.card_list[(len(self.card_list)//2):]
        newdeck = []
        for i in range(len(self.card_list)//2):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
print(deck)"
55474,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        print(len(deck2))
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        r = x
        return newdeck
deck = Deck()
#print(deck)"
55475,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        print(len(deck2))
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55476,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        print(len(deck2))
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        return newdeck
deck = Deck()
#print(deck)"
55477,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        print(len(deck1))
        deck2 = self.card_list[half:]
        print(len(deck2))
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        for this will create and erroor:
        return newdeck
deck = Deck()
#print(deck)"
55478,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list)//2
        deck1 = self.card_list[:half]
        deck2 = self.card_list[half:]
        newdeck = []
        for i in range(half):
            newdeck.append(deck1[i])
            newdeck.append(deck2[i])
        #r = error
        return newdeck
deck = Deck()
print(deck.shuffle())"
55492,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
            
"
56012,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.cardlist(:mid)
        l2 = self.cardlist(:mid)
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list

"
56013,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list(:mid)
        l2 = self.card_list(:mid)
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list

"
56014,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[:mid]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list

"
56015,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list

"
56771,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
            
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
         

"
58236,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle-1:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        else:
            for i in range(len(list2)):
                list3.append(list2[i])
                list3.append(list1[i])
            list3.append(list1[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58237,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[midle:]
        if len(list1) > len(list2):
            for i in range(list1):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58238,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        if len(list1) > len(list2):
            for i in range(list1):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58239,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)/2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        if len(list1) > len(list2):
            for i in range(list1):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58240,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        if len(list2) > len(list1):
            for i in range(list1):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58241,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58242,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle-1]
        list2 = self.card_list[middle-1:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58243,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58244,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle-1:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58245,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle-1:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58246,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        else:
            for i in range(len(list2)):
                list3.append(list2[i])
                list3.append(list1[i])
            list3.append(list1[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58275,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        
        for i in range(len(list1)):
            list3.append(list1[i])
            list3.append(list2[i])
   
        if len(self.card_list)%2 == 1:
            list3.append(list2[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58276,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        if len(list2) > len(list1):
            for i in range(len(list1)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list2[-1])
        else:
            for i in range(len(list2)):
                list3.append(list1[i])
                list3.append(list2[i])
            list3.append(list1[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58277,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        list1 = []
        list2 = []
        list3 = []
        list1 = self.card_list[:middle]
        list2 = self.card_list[middle:]
        
        for i in range(len(list1)):
            list3.append(list1[i])
            list3.append(list2[i])
   
        if len(self.card_list)%2 == 1:
            list3.append(list1[-1])
        self.card_list = list3
        
        
            
            
        
        

"
58713,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def suffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:middle]
        l2 = self.card_list[middle:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list  = l3

"
58714,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        middle = len(self.card_list)//2
        l1 = self.card_list[:middle]
        l2 = self.card_list[middle:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list  = l3

"
59712,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) // 2
        self.firhalf = self.card_list[:l+1]
        self.sechalf = self.card_list[l+1:]
        self.shuffle_list = []
        for i in range(l+1):
            self.shuffle_list.append(self.firhalf[i])
            self.shuffle_list.append(self.sechalf[i])
"
59713,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) / 2
        self.firhalf = self.card_list[0,l]
        self.sechalf = self.card_list[l:]
        self.shuffle_list = []
        for i in range(l):
            self.shuffle_list.append(self.firhalf[i])
            self.shuffle_list.append(self.sechalf[i])
"
59714,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) // 2
        self.firhalf = self.card_list[0,l]
        self.sechalf = self.card_list[l:]
        self.shuffle_list = []
        for i in range(l+1):
            self.shuffle_list.append(self.firhalf[i])
            self.shuffle_list.append(self.sechalf[i])
"
59715,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l+1]
        sechalf = self.card_list[l+1:]
        shuffle_list = []
        for i in range(l+1):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
"
59716,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if len(self.card_list) % 2 == 1:
            even = False
        else:
            even = True
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l]
        sechalf = self.card_list[l:]
        shuffle_list = []
        for i in range(l):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
        if even == False:
            shuffle_list.append(sechalf[-1])
        self.card_list = shuffle_list"
59717,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list)
        self.firhalf = self.card_list[0,l]
        self.sechalf = self.card_list[l:]
        self.shuffle_list = []
        for i in range(l/2):
            self.shuffle_list.append(self.firhalf[i])
            self.shuffle_list.append(self.sechalf[i])
"
59718,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l]
        sechalf = self.card_list[l:]
        shuffle_list = []
        for i in range(l):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
        self.card_list = shuffle_list"
59719,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) / 2
        self.firhalf = self.card_list[0,l]
        self.sechalf = self.card_list[l:]
        self.shuffle_list = []
        for i in range(l/2):
            self.shuffle_list.append(self.firhalf[i])
            self.shuffle_list.append(self.sechalf[i])
"
59720,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) / 2
        self.firhalf = self.card_list[0,l]
        self.sechalf = self.card_list[l:]
        self.shuffle_list = []
        for i in range(l+1):
            self.shuffle_list.append(self.firhalf[i])
            self.shuffle_list.append(self.sechalf[i])
"
59721,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) // 2
        self.firhalf = self.card_list[0,l+1]
        self.sechalf = self.card_list[l+1:]
        self.shuffle_list = []
        for i in range(l+1):
            self.shuffle_list.append(self.firhalf[i])
            self.shuffle_list.append(self.sechalf[i])
"
59722,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l+1]
        sechalf = self.card_list[l+1:]
        shuffle_list = []
        for i in range(l):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
"
59723,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l]
        sechalf = self.card_list[l:]
        shuffle_list = []
        for i in range(l):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
"
59724,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if len(self.card_list) % 2 == 1:
            even = False
        else:
            even = True
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l]
        sechalf = self.card_list[l:]
        shuffle_list = []
        for i in range(l-1):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
        if even = False:
            shuffle_list.append(sechalf[-1])
        self.card_list = shuffle_list"
59725,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if len(self.card_list) % 2 == 1:
            even = False
        else:
            even = True
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l]
        sechalf = self.card_list[l:]
        shuffle_list = []
        for i in range(l):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
        if even = False:
            shuffle_list.append(sechalf[-1])
        self.card_list = shuffle_list"
59726,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if len(self.card_list) % 2 == 1:
            even = False
        else:
            even = True
        l = len(self.card_list) // 2
        firhalf = self.card_list[:l]
        sechalf = self.card_list[l:]
        shuffle_list = []
        for i in range(l):
            shuffle_list.append(firhalf[i])
            shuffle_list.append(sechalf[i])
        if even = False:
            shuffle_list.append(sechalf[-1])
        self.card_list = shuffle_list"
60198,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        firsthalf = self.card_list[:27]
        secondhalf = self.card_list[27:]
        shuffled = []
        for i in range(27):
            shuffled.append(firsthalf[i])
            shuffled.append(secondhalf[i])
        return shuffled
"
60199,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        firsthalf = self.card_list[:mid]
        secondhalf = self.card_list[mid:]
        shuffled = []
        for i in range(27):
            shuffled.append(firsthalf[i])
            shuffled.append(secondhalf[i])
        return shuffled
"
60200,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        firsthalf = self.card_list[:mid]
        secondhalf = self.card_list[mid:]
        shuffled = []
        for i in range(len(firsthalf):
            shuffled.append(firsthalf[i])
            shuffled.append(secondhalf[i])
        if len(secondhalf) > len(firsthalf):
                       shuffled.append(secondhalf[-1]
        self.card_list = shuffled
"
60201,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        firsthalf = self.card_list[:mid]
        secondhalf = self.card_list[mid:]
        shuffled = []
        for i in range(mid):
            try:
                shuffled.append(firsthalf[i])
                shuffled.append(secondhalf[i])
        return shuffled
"
60202,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        firsthalf = self.card_list[:mid]
        secondhalf = self.card_list[mid:]
        shuffled = []
        for i in range(mid):
            shuffled.append(firsthalf[i])
            shuffled.append(secondhalf[i])
        return shuffled
"
60203,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        firsthalf = self.card_list[:mid]
        secondhalf = self.card_list[mid:]
        shuffled = []
        for i in range(mid):
            shuffled.append(firsthalf[i])
            shuffled.append(secondhalf[i])
        return shuffled
"
60204,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        firsthalf = self.card_list[:mid]
        secondhalf = self.card_list[mid:]
        shuffled = []
        for i in range(len(firsthalf)):
            shuffled.append(firsthalf[i])
            shuffled.append(secondhalf[i])
        if len(secondhalf) > len(firsthalf):
            shuffled.append(secondhalf[-1])
        self.card_list = shuffled
"
60205,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        firsthalf = self.card_list[:mid]
        secondhalf = self.card_list[mid:]
        shuffled = []
        for i in range(len(firsthalf)):
            shuffled.append(firsthalf[i])
            shuffled.append(secondhalf[i])
        if len(secondhalf) > len(firsthalf):
            shuffled.append(secondhalf[-1]
        self.card_list = shuffled
"
60813,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list=[]
        
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(l2)>len(l1):
            new_list.append(l2[-1])
        self.card_list=new_list[]"
60814,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list=[]
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(l2)>len(l1):
            new_list.append(l2[-1])
        return new_list"
60815,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list=[]
        
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(l2)>len(l1):
            new_list.append(l2[-1])
        self.card_list=new_list"
60827,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
           
        if len(l1) <len(l2):
            l3.append(l2[-1])
   "
60831,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
"
60832,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
           
        if len(l1) <len(l2):
            new_list.append(l2[-1])
   "
60833,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        new_list = []
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
           
        if len(l1) <len(l2):
            new_list.append(l2[-1])
   
        self.card_list = new_list"
61072,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        first_half = self.card_list[:half]
        second_half = self.card_list[half:]
        new_list = []
        for i in range(0, len(first_half)-1):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
        return new_list"
61073,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        first_half = self.card_list[:half]
        second_half = self.card_list[half:]
        new_list = []
        for i in range(0, len(first_half)-1):
            new_list.append(first_half[i])
            new_list.append(second_half[i]
        return new_list"
61074,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        lst1 = self.card_list[:half]
        lst2 = self.card_list[half:]
        newlst = []
        for i in range(len(lst1)):
            newlst.append(lst1[i])
            newlst.append(lst2[i])
        if len(self.card_list) % 2 ==1:
            newlst.append(lst2[-1])
        self.card_list = newlst"
61075,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        first_half = self.card_list[:half]
        second_half = self.card_list[half:]
        new_list = []
        for i in range(0, len(second_half)-1):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
        return new_list"
61076,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        first_half = self.card_list[:half]
        second_half = self.card_list[half:]
        new_list = []
        for i in range(0, len(first_half)-1):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
        return new_list"
61077,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        first_half = self.card_list[:half]
        second_half = self.card_list[half:]
        new_list = []
        for i in range(len(first_half)):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
        return new_list"
61078,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        first_half = self.card_list[:half]
        second_half = self.card_list[half:]
        new_list = []
        for i in range(0, len(first_half)):
            new_list.append(first_half[i])
            new_list.append(second_half[i])
        return new_list"
61080,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        half = len(self.card_list) // 2
        lst1 = self.card_list[:half]
        lst2 = self.card_list[half:]
        newlst = []
        for i in range(len(lst1)):
            newlst.append(lst1[i])
            newlst.append(lst2[i])
        if len(self.card_list % 2 ==1:
            newlst.append(lst2[-1])
        self.card_list = newlst"
61784,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        newList = []
        l1 = []
        l1 = self.card_list[:int((len(self.card_list)/2))]
        l2 = []
        l2 = self.card_list[int(len(self.card_list)/2):]
        for num in range(0,len(l1)):
            newList += l1[num]
            newList += l2[num]
        return newList
            
        

"
61793,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        newList = []
        l1 = []
        l1 = self.card_list[:(len(self.card_list)/2)]
        l2 = []
        l2 = self.card_list[(len(self.card_list)/2):]
        for num in range(0,len(l1)):
            newList += l1[num]
            newList += l2[num]
        return newList
            
        

"
61794,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    "
61795,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        newList = []
        l1 = []
        l1 = self.card_list[:int((len(self.card_list)/2))]
        l2 = []
        l2 = self.card_list[int(len(self.card_list)/2):]
        for num in range(0,len(l1)):
            newList += l1[num]
            newList += l2[num]
        return newList
           "
61796,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        newList = []
        l1 = []
        l1 = self.card_list[:int(len(self.card_list)/2)]
        l2 = []
        l2 = self.card_list[int(len(self.card_list)/2):]
        for num in range(0,len(l1)):
            newList += l1[num]
            newList += l2[num]
        return newList
           "
61797,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        newList = []
        l1 = []
        l1 = self.card_list[:int(len(self.card_list)/2)]
        l2 = []
        l2 = self.card_list[int(len(self.card_list)/2):]
        for num in range(0,len(l1)):
            newList += l1[num]
            newList += l2[num]
        return newList
           "
61798,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self,list):
        newList = []
        l1 = []
        l1 = self.card_list[:int(len(self.card_list)/2)]
        l2 = []
        l2 = self.card_list[int(len(self.card_list)/2):]
        for num in range(0,len(l1)):
            newList += l1[num]
            newList += l2[num]
        return newList
           "
62606,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid=len(self.card_list)//2
        l1=self.card_list[:mid]
        l2=self.card_list[mid:]
        l3=[]
        
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
            
        if len(l2)>len(l1):
            l3.append(l2[-1])
        self.card_list=l3

"
62633,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = []
        l2 = []
        x = len(self.cards)
        
        for i in range(x):
            if i%2 == 0:
                l1.append(self.cards[i])
            else:
                l2.append(self.cards[i])
        
        self.cards = []
        
        for i in range(x/2):
                self.cards.append(l1[i])
                self.cards.append(l2[i])
        
        if(len(l1)>len(l2):
           self.cards.append(l1[-1])
        "
62647,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = []
        l2 = []
        x = len(self.cards)
        
        for i in range(x):
            if i%2 == 0:
                l1.append(self.cards[i])
            else:
                l2.append(self.cards[i])
        
        self.cards = []
        
        for i in range(x/2):
                self.cards.append(l1[i])
                self.cards.append(l2[i])
        
        if(len(l1)>len(l2)):
            self.cards.append(l1[-1])
        "
62648,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = []
        l2 = []
        x = len(self.cards)
        
        for i in range(x):
            if i%2 == 0:
                l1.append(self.card_list[i])
            else:
                l2.append(self.card_list[i])
        
        self.card_list = []
        
        for i in range(x/2):
                self.card_list.append(l1[i])
                self.card_list.append(l2[i])
        
        if(len(l1)>len(l2)):
            self.card_list.append(l1[-1])
        "
62649,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = []
        l2 = []
        x = len(self.card_list)
        
        for i in range(x):
            if i%2 == 0:
                l1.append(self.card_list[i])
            else:
                l2.append(self.card_list[i])
        
        self.card_list = []
        
        for i in range(x/2):
                self.card_list.append(l1[i])
                self.card_list.append(l2[i])
        
        if(len(l1)>len(l2)):
            self.card_list.append(l1[-1])
        "
62650,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = []
        l2 = []
        x = len(self.card_list)
        
        for i in range(x):
            if i%2 == 0:
                l1.append(self.card_list[i])
            else:
                l2.append(self.card_list[i])
        
        self.card_list = []
        
        for i in range(x//2):
                self.card_list.append(l1[i])
                self.card_list.append(l2[i])
        
        if(len(l1)>len(l2)):
            self.card_list.append(l1[-1])
        "
62651,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = []
        l2 = []
        x = len(self.card_list)
        
        for i in range(x):
            if i%2 == 0:
                l1.append(self.card_list[i])
            else:
                l2.append(self.card_list[i])
        
        self.card_list = []
        
        for i in range(x//2):
                self.card_list.append(l1[i])
        
        for i in range(x//2):
                self.card_list.append(l2[i])
        
        if(len(l1)>len(l2)):
            self.card_list.append(l1[-1])
        "
62652,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        x = len(self.card_list)
        l1 = self.card_list[:x//2]
        l2 = self.card_list[x//2:]
        
        self.card_list = []
        
        for i in range(x//2):
                self.card_list.append(l1[i])
                self.card_list.append(l2[i])
        
        if(len(l1)<len(l2)):
            self.card_list.append(l2[-1])
        "
63116,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(0,total//2):
            self.card_list.append(org[i])
            self.card_list.append(org[i+total//2])
        
        "
63118,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        n1 = self.card_list[0:total//2]
        end = """"
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
        self.card_list.append(end)
        
        "
63120,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        n1 = self.card_list[:len(self.card_list)//2]
        n2 = self.card_list[len(self.card_list)//2:]
        self.card_list = []
        
        i = 0
        while len(n2) > i:
            self.card_list.append(n2[i])
            if len(n1) <= i:
                break
            self.card_list.append(n2[i])
            i += 1
        

        

"
63121,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        n1 = self.card_list[:len(self.card_list)//2]
        n2 = self.card_list[len(self.card_list)//2:]
        self.card_list = []
        
        i = 0
        while len(n2) > i:
            self.card_list.append[n2[i]]
            if len(n1) <= i:
                break
            self.card_list.append[n2[i]]
            i += 1
        

        

"
63122,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        n1 = self.card_list[:len(self.card_list)//2]
        n2 = self.card_list[len(self.card_list)//2:]
        self.card_list = []
        
        i = 0
        while len(n2) > i::
            self.card_list.append[n2[i]]
            if len(n1) <= i:
                break
            self.card_list.append[n2[i]]
            i += 1
        

        

"
63123,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        
        for i in range(0,total,2):
            self.card_list[i] = org[i//2]
            self.card_list[i+1] = org[i+total//2]
        
        "
63124,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        n1 = self.card_list[0:total//2]
        end = []
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
        self.card_list += end
        
        "
63125,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        n1 = self.card_list[0:total//2]
        end = []
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
            i += 1
        self.card_list += end
        
        "
63126,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(1,total,2):
            self.card_list.append(org[i//2])
            self.card_list.append(org[i+total//2])
        
        "
63127,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        if total<2:
            return
        
        n1 = self.card_list[0:total//2]
        end = []
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
            i += 1
        self.card_list += end
        
        "
63128,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        if total<2:
            return
        
        n1 = self.card_list[0:total//2]
        end = []
        
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        if len(n1)<2:
            self.card_list = n1 + n2 + end
            return
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
            i += 1
        self.card_list += end
        
        "
63129,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        if total<2:
            return
        
        n1 = self.card_list[0:total//2]
        end = []
        
        if total%2 == 0:
            n2 = self.card_list[total//2:]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
            i += 1
            
        #self.card_list += end
        
        "
63130,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        if total<2:
            return
        
        n1 = self.card_list[0:total//2]
        end = []
        
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
            i += 1
        #self.card_list += end
        
        "
63131,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        if total<2:
            return
        
        n1 = self.card_list[0:total//2]
        end = []
        
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
            i += 1
            
        if total%2 == 1:
            self.card_list += end
        
        "
63132,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        
        for i in range(1,total,2):
            self.card_list[i-1] = org[i//2]
            self.card_list[i] = org[i+total//2]
        
        "
63133,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        
        for i in range(1,total-10,2):
            self.card_list[i-1] = org[i//2]
            self.card_list[i] = org[i+total//2]
        
        "
63134,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        if total<2:
            return
        
        n1 = self.card_list[0:total//2]
        end = []
        
        if total%2 == 0:
            n2 = self.card_list[total//2:total]
        else:
            end = self.card_list[total-1]
            n2 = self.card_list[total//2:total-1]
        
        
        self.card_list = []
        i = 0
        while i<len(n1):
            self.card_list.append(n1[i])
            self.card_list.append(n2[i])
            i += 1
            
        #self.card_list += end
        
        "
63135,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(0,total//2):
            self.card_list.append(org[i])
            if total%2==1 and i==total//2-1:
                break
            self.card_list.append(org[i+total//2])
        
        "
63136,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(0,total//2):
            self.card_list.append(org[i])
            if total%2==0 and i==total//2-1:
                break
            self.card_list.append(org[i+total//2])
        
        "
63137,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        
        for i in range(0,total-1,2):
            self.card_list[i] = org[i//2]
            self.card_list[i+1] = org[i+total//2]
        
        "
63138,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(0,total//2):
            self.card_list.append(org[i])
            self.card_list.append(org[i+total//2])
        
        if total%2==1:
            self.card_list.append(org[-1])"
63139,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(1,total//2):
            self.card_list.append(org[i])
            self.card_list.append(org[i+total//2])
        
        "
63140,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(0,total//2):
            self.card_list.append(org[i])
            self.card_list.append(org[i+total//2])
        
        "
63141,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(0,total//2+1):
            self.card_list.append(org[i])
            if total%2==1 and i==total//2:
                break
            self.card_list.append(org[i+total//2])
        
        "
63142,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        total = len(self.card_list)
        
        org = self.card_list
        self.card_list = []
        
        for i in range(0,total//2):
            self.card_list.append(org[i])
            if total%2==1 and i==total//2-1:
                break
            self.card_list.append(org[i+total//2])
        
        "
63153,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        num_list = []
        for i in range(len(l1)):
            num_list.append([l1][i])
            nnum_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
63154,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid - len(self.card_list) // 2
        l1 = self.card_list[mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            num_list.append([l1][i])
            nnum_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
63155,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append([l1][i])
            new_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
63156,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        num_list = []
        for i in range(len(l1)):
            num_list.append([l1][i])
            num_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
63157,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            num_list.append([l1][i])
            nnum_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
63158,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append((l1)[i])
            new_list.append((l2)[i])
        if len(self.card_list) % 2 == 1 or 0:
            new_list.append(12[-1])
        self.card_list = new_list"
63159,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            num_list.append([l1][i])
            nnum_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
63160,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
     def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append([l1][i])
            new_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list
"
63161,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1 -1)):
            new_list.append([l1][i])
            new_list.append([l2][i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
63162,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append((l1)[i])
            new_list.append((l2)[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list"
64088,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) //2
        l1 = self.card_list[:mid}
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = 13
                            
                            

"
64089,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""AnonFirstName"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
64609,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newList = []
        mid = len(self.card_list) // 2
        

"
64620,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        half = len(self.card_list) // 2
        a = self.card_list[:half]
        b = self.card_list[half:]
        c = []
        for i in range(len(a)):
            c.append(a[i])
            c.append(b[i])
        if len(a) < len(b):
            c.append(b[-1])
        self.card_list = c

"
65425,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(11)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
               

"
65429,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
               

"
65432,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
66102,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        return newList
          

"
66103,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length+1]
        secondHalf = self.card_list[length+1:]
        newList = []
        for i in range(len(firstHalf) - 1):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        return newList
          

"
66106,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(secondHalf)):
            if (i < (len(firstHalf) + 1):
                newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66107,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length+1]
        secondHalf = self.card_list[length+1:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        return newList
          

"
66108,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length+1]
        secondHalf = self.card_list[length+1:]
        newList = []
        for i in len(firstHalf):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        return newList
          

"
66109,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            if i = len(secondHalf) - 1:
                newList.append(secondHalf[i])
        self.card_list = newList
          

"
66110,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66111,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(secondHalf)):
            if (i = (len(firstHalf) - 1)):
                newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66112,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(secondHalf)):
            if (i > (len(firstHalf) - 1)):
                newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66113,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            if (i = len(secondHalf) - 1):
                newList.append(secondHalf[i])
        self.card_list = newList
          

"
66114,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            if (i = (len(secondHalf) - 1)):
                newList.append(secondHalf[i])
        self.card_list = newList
          

"
66115,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
      
        if len(secondHalf) % 2 == 1:
            newList.append(secondHalf[-1]
        self.card_list = newList
          

"
66116,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(secondHalf)):
            if (i < (len(firstHalf) - 1)):
                newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66117,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(secondHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66118,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(secondHalf)):
            if (i < (len(firstHalf)):
                newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66119,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
      
        if len(secondHalf) % 2 == 1:
            newList.append(secondHalf[length + 1]
        self.card_list = newList
          

"
66120,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
      
        if len(secondHalf) % 2 == 1:
            newList.append(secondHalf[length - 1]
        self.card_list = newList
          

"
66121,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        self.card_list = newList
          

"
66122,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
      
        if len(self.card_list) % 2 == 1:
            newList.append(secondHalf[-1])
        self.card_list = newList
          

"
66123,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        length = len(self.card_list) // 2
        firstHalf = self.card_list[:length]
        secondHalf = self.card_list[length:]
        newList = []
        for i in range(len(firstHalf)):
            newList.append(firstHalf[i])
            newList.append(secondHalf[i])
        if len(secondHalf) % 2 == 1:
            newList.append(secondHalf[length + 1]
        self.card_list = newList
          

"
66148,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        sid = l
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        len(self.card)
        l1 = self
        l2 = self.(card(lis)
        new_list = []
        for i in rep(len(l1)):
                   new_list.append(l1[i])
                   new_list.append(l2[i])
                  
         

"
66149,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        sid = l
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
                  
         

"
66725,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list = []
        secondcard = self.card_list[2]
        self.card_list[2] = self.card_list[1]
        self.card_list[1] = secondcard
        return self.card_list

        

"
66726,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        secondcard = self.card_list[2]
        self.card_list[2] = self.card_list[1]
        self.card_list[1] = secondcard
        return self.card_list

        

"
66727,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        shuffled_lst = []
        shuffled_lst = card_list
        secondcard = self.shuffled_lst[2]
        self.shuffled_lst[2] = self.shuffled_lst[1]
        self.shuffled_lst[1] = secondcard
        return self.shuffled_lst

        

"
66728,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        shuffled_lst = []
        shuffled_lst = self.card_list
        secondcard = self.shuffled_lst[2]
        self.shuffled_lst[2] = self.shuffled_lst[1]
        self.shuffled_lst[1] = secondcard
        return self.shuffled_lst

        

"
66729,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if len(self.card_list) < 3:
            return self.card_list
        else:
            secondcard = self.card_list[2]
            self.card_list[2] = self.card_list[1]
            self.card_list[1] = secondcard
            return self.card_list

        

"
66730,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        secondcard = self.card_list[2]
        self.card_list[2] = self.card_list[1]
        self.card_list[1] = secondcard
        return self.card_list

        

"
66731,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list // 2)
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(l1):
             new_list.append(l1[i])
             new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
            

        

"
66732,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(l1):
             new_list.append(l1[i])
             new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
            

        

"
66733,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(l1):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
            

        

"
66734,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
            

        

"
66936,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
cardlist = [a,b,c,d,e]
print(cardlist.shuffle)


            
            
            

"
66937,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    

            
            
            

"
66938,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
            
            
            

"
66939,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
            
            
            

"
66940,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
c = [a,b,c,d,e]
print(Deck(c))
print(Deck(c).shuffle)
    
    

            
            
            

"
66941,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
    

            
            
            

"
66943,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
c1 = Deck([a,b,c,d,e])


            
            
            

"
66945,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
c1 = Deck()


            
            
            

"
66947,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
c = Deck
print(c.shuffle())


            
            
            

"
66949,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
c = Deck
print(c)


            
            
            

"
66950,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        half = len(self.card_list) // 2
        firsthalf = self.card_list[:half]
        secondhalf = self.card_list[half:]
        shuffledlist = []
        for idx in range(len(self.card_list)-1):
            shuffledlist.append(firsthalf[idx])
            shuffledlist.append(secondhalf[idx])
        return shuffledlist
    
    
c = Deck
print(c.shuffle)


            
            
            

"
67662,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck(Card):
    def shuffle(self):
        l1 = self.card_list[:]

    def __init__(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
67666,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:
    def shuffle(self):
        l1 = self.card_list[:]
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list

    def __init__(self):
        
        
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
67667,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:
    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))
    def shuffle(self):
        l1 = self.card_list[:]
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list

    

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
67668,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:
    def shuffle(self):
        l1 = self.card_list[:]

    def __init__(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
68440,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        seld.card_list = new_list
        

"
68441,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list(:mid)
        l2 = self.card_list(mid:)
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list % 2 == 1):
            new_list.append(l2[-1])
        seld.card_list = new_list
        

"
68442,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list % 2 == 1):
            new_list.append(l2[-1])
        seld.card_list = new_list
        

"
68443,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
        

"
69046,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfway = self.card_list // 2
        first_half = self.card_list[:halfway]
        second_half = self.card_list[halfway:]
        new_deck = []
        i = 0
        while i < len(first_half):
            new_deck.append(first_half[i])
            new_deck.append(second_half[i])
            i += 1
        if len(first_half) != len(second_half):
            new_deck.append(second_half[-1])
        return new_deck
    


"
69047,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfway = len(self.card_list) // 2
        first_half = self.card_list[:halfway]
        second_half = self.card_list[halfway:]
        new_deck = []
        i = 0
        while i < len(first_half):
            new_deck.append(first_half[i])
            new_deck.append(second_half[i])
            i += 1
        if len(first_half) != len(second_half):
            new_deck.append(second_half[-1])
        return new_deck

print(Deck.shuffle())


"
69048,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck(Card):

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfway = len(self.card_list) // 2
        print(halfway)
        first_half = self.card_list[:halfway]
        second_half = self.card_list[halfway:]
        print(first_half)
        print(second_half)
        new_deck = []
        i = 0
        while i < len(first_half):
            new_deck.append(first_half[i])
            new_deck.append(second_half[i])
            i += 1
        if len(first_half) != len(second_half):
            new_deck.append(second_half[-1])
        return new_deck



"
69049,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfway = len(self.card_list) // 2
        first_half = self.card_list[:halfway]
        second_half = self.card_list[halfway:]
        new_deck = []
        i = 0
        while i < len(first_half):
            new_deck.append(first_half[i])
            new_deck.append(second_half[i])
            i += 1
        if len(first_half) != len(second_half):
            new_deck.append(second_half[-1])
        return new_deck
    


"
69050,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck(Card):

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfway = len(self.card_list) // 2
        first_half = self.card_list[:halfway]
        second_half = self.card_list[halfway:]
        new_deck = []
        i = 0
        while i < len(first_half):
            new_deck.append(first_half[i])
            new_deck.append(second_half[i])
            i += 1
        if len(first_half) != len(second_half):
            new_deck.append(second_half[-1])
        return new_deck



"
69051,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck(Card):

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfway = len(self.card_list) // 2
        first_half = self.card_list[:halfway]
        second_half = self.card_list[halfway:]
        new_deck = []
        i = 0
        while i < len(first_half):
            new_deck.append(first_half[i])
            new_deck.append(second_half[i])
            i += 1
        if len(first_half) != len(second_half):
            new_deck.append(second_half[-1])
        self.card_list = new_deck



"
69748,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        11 = self.card_list[:mid]
        12 = self.card_list[:mid]
        new_list = []
        for i in range(len(11)):
            new_list.append(11[i])
            new_list.append(12[i])
            

"
69749,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        11 = self.card_list[:mid]
        12 = self.card_list[:mid]
        new_list = []
        for i in range(len(11)):
            new_list.append(11[i])
            new_list.append(12[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list
            

"
69753,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        11 = self.card_list[:mid]
        12 = self.card_list[mid:]
        new_list = []
        for i in range(len(11)):
            new_list.append(11[i])
            new_list.append(12[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list
            

"
69756,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        11 = self.card_list[:mid]
        12 = self.card_list[mid:]
        new_list = []
        
            

"
69757,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        b = self.card_list[:mid]
        c = self.card_list[:mid]
        new_list = []
        for i in range(len(b)):
            new_list.append(b[i])
            new_list.append(c[i])
            

"
69758,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        b = self.card_list[:mid]
        c = self.card_list[mid:]
        new_list = []
        for i in range(len(b)):
            new_list.append(b[i])
            new_list.append(c[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(c[-1])
        self.card_list = new_list
            

"
69760,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        b = self.card_list[:mid]
        c = self.card_list[:mid]
        new_list = []
        for i in range(len(b)):
            new_list.append(b[i])
            new_list.append(c[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(b[-1])
        self.card_list = new_list
            

"
69763,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        b = self.card_list[:mid]
        c = self.card_list[:mid]
        new_list = []
        for i in range(len(b)):
            new_list.append(b[i])
            new_list.append(c[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(c[-1])
        self.card_list = new_list
            

"
70414,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        listA = []
        listB = []
        r = int(len(self.card_list)/2)
        for i in range(r):
            listA.append(self.card_list[i])
        for j in range(r,len(self.card_list)):
            listB.append(self.card_list[j])
        self.card_list.clear()
        for k in range(len(listB)):
            self.card_list.append(listA[k])
            self.card_list.append(listB[k])
            

"
70415,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        listA = []
        listB = []
        r = int(len(self.card_list)/2)
        for i in range(r):
            listA.append(card_list[i])
        for j in range(r,len(self.card_list)):
            listB.append(card_list[j])
        card_list.clear
        for k in range(len(listB)):
            card_list.append(listA[k])
            card_list.append(listB[k])
            

"
70416,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        listA = []
        listB = []
        r = int(len(self.card_list)/2)
        for i in range(r):
            listA.append(self.card_list[i])
        for j in range(r,len(self.card_list)):
            listB.append(self.card_list[j])
        self.card_list.clear()
        for k in range(len(listB)):
            if(k < len(listA)): self.card_list.append(listA[k])
            self.card_list.append(listB[k])
            

"
70417,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        listA = []
        listB = []
        r = int(len(self.card_list)/2)
        for i in range(r):
            listA.append(self.card_list[i])
        for j in range(r,len(self.card_list)):
            listB.append(self.card_list[j])
        self.card_list.clear
        for k in range(len(listB)):
            self.card_list.append(listA[k])
            self.card_list.append(listB[k])
            

"
70514,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
70870,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
70872,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l2 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
70873,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l2 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1)
            l3.append(l2[-1])
        self.card_list = l3

"
71148,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []

        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
        
        

"
71156,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []

        for i in range(len(l1)):
            l3.append(l1[1])
            l3.append(l2[1])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = 13
        
        

"
71157,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1= self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []

        for i in range(len(l1)):
            l3.append(l1[1])
            l3.append(l2[1])
        if len(l2) > len(l1):
            l3.append(12[-1])
        self.card_list = 13
        
        

"
71158,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []

        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = 13
        
        

"
71915,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        self.card_list.remove(newlist[0])
        newlist.append(self.card_list[newindex])
        self.card_list.remove(newlist[1])
        for card in self.card_list:
            newlist.append(card)    
        return newlist    

"
71916,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex-1])
        for card in self.card_list:
            if self.card_list.index(newlist[0]):
                continue
            if self.card_list.index(newlist[1]):
                continue
            else:
                newlist.append(card)    
        return newlist    

"
71917,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(newlist[0]):
                continue
            if self.card_list.index(newlist[1]):
                continue
            else:
                newlist.append(card)    
        return newlist    

"
71918,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex+1])
        for card in self.card_list:
            if self.card_list.index(newlist[0]):
                continue
            if self.card_list.index(newlist[1]):
                continue
            else:
                newlist.append(card)    
        return newlist    

"
71919,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            #if self.card_list.index(newlist[0]):
            if card == newlist[0]:
                continue
            #if self.card_list.index(newlist[1]):
            if card == newlist[1]:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
71920,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list[1:]:
            #if self.card_list.index(newlist[0]) == 0:
                #continue
            if self.card_list.index(newlist[1]) == 1:
                continue
            newlist.append(card)    
        return newlist    

"
71921,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index() == 0:
                continue
            if self.card_list.index() == 1:
                continue
            newlist.append(card)    
        return newlist    

"
71922,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        #self.card_list.remove(newlist[0])
        newlist.append(self.card_list[newindex])
        #self.card_list.remove(newlist[1])
        for card in self.card_list:
            if card == newlist[0]:
                continue
            if card == newlist[1]:
                continue
            newlist.append(card)    
        return newlist    

"
71923,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(newlist[0]) == 0:
                continue
            if self.card_list.index(newlist[1]) == 1:
                continue
            newlist.append(card)    
        return newlist    

"
71924,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = (len(self.card_list) // 2)
        l2 = self.card_list[midpoint:]
        newlist = []
        newlist.append(l1[0])
        newlist.append(l2[0])
        for i in range(l1[1:]):
            newlist.append(i)
        return newlist

            
            
        
        
        
        
        
        
"
71925,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list[1:]:
            #if self.card_list.index(newlist[0]) == 0:
                #continue
            if card == newlist[1]:
                continue
            newlist.append(card)    
        return newlist    

"
71927,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = len(self.card_list) // 2
        l2 = self.card_list[mipoint:]
        newlist = []
        newlist.append(l1[0])
        newlist.append(l2[0])
        for i in range(l1[1:]):
            newlist.append(i)
        return newlist

            
            
        
        
        
        
        
        
"
71928,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        midpoint = (len(self.card_list) // 2)
        l1 = self.card_list[:midpoint]
        l2 = self.card_list[midpoint:]
        newlist = []
        for i in range(len(l1)):
            newlist.append(l1[i])
            newlist.append(l2[i])
        if len(self.card_list) % 2 == 1:
            newlist.append(l2[-1])
        self.card_list = newlist

            
            
        
        
        
        
        
        
"
71929,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = (len(self.card_list) // 2)
        l2 = self.card_list[midpoint:]
        newlist = []
        newlist.append(l1[0])
        newlist.append(l2[0])
        for i in range(l1[1:]):
            newlist.append(l1[i])
        return newlist

            
            
        
        
        
        
        
        
"
71930,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        midpoint = (len(self.card_list) // 2)
        l1 = self.card_list[:midpoint]
        l2 = self.card_list[midpoint:]
        newlist = []
        for i in range(len(l1)):
            newlist.append(l1[i])
            newlist.append(l2[i])
        if len(self.card_list) % 2 == 1:
            newlist.append(l2[-1])
        self.card_list = newlist
        #return newlist

            
            
        
        
        
        
        
        
"
71931,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = (len(self.card_list) // 2)
        l2 = self.card_list[midpoint:]
        newlist = []
        newlist.append(l1[0])
        newlist.append(l2[0])
        for i in range(len(l1)):
            newlist.append(l1[i])
        return newlist

            
            
        
        
        
        
        
        
"
71932,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = (len(self.card_list) // 2)
        l2 = self.card_list[midpoint:]
        newlist = []
        newlist.append(l1[0])
        newlist.append(l2[0])
        for i in range(len(l1)):
            newlist.append(l1[i])
            newlist.append(l2[i])
        if len(self.card_list) % 2 == 1:
            newlist.append(l2[-1])
        self.card_list = newlist
        #return newlist

            
            
        
        
        
        
        
        
"
71933,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = len(self.card_list) // 2
        l2 = self.card_list[midpoint:]
        newlist = []
        newlist.append(l1[0])
        newlist.append(l2[0])
        for i in range(l1[1:]):
            newlist.append(i)
        return newlist

            
            
        
        
        
        
        
        
"
71935,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = (len(self.card_list) // 2)
        l2 = self.card_list[midpoint:]
        newlist = []
        newlist.append(l1[0])
        newlist.append(l2[0])
        for i in range(len(l1[1:])):
            newlist.append(l1[i])
        return newlist

            
            
        
        
        
        
        
        
"
71936,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        l1 = self.card_list[:]
        midpoint = (len(self.card_list) // 2)
        l2 = self.card_list[midpoint:]
        newlist = []
        for i in range(len(l1)):
            newlist.append(l1[i])
            newlist.append(l2[i])
        if len(self.card_list) % 2 == 1:
            newlist.append(l2[-1])
        self.card_list = newlist
        #return newlist

            
            
        
        
        
        
        
        
"
72623,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = len(self.card_list) // 2
        newlist.append(card_list[0])
        newlist.append(card_list[newindex])
        for card in self.card_list:
            if index(card) == 0:
                continue
            if index(card) == newindex:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72624,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = len(self.card_list) // 2
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(card) == 0:
                continue
            if self.card_list.index(card) == newindex:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72625,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = len(self.card_list) // 2
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(card) == 0:
                continue
            if card == newlist[1]:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72626,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = len(self.card_list) // 2
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(card) == 0:
                continue
            if self.card_list.index(card) == 1:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72627,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = len(self.card_list) // 2
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if index(card) == 0:
                continue
            if index(card) == newindex:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72628,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = len(self.card_list) // 2
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(card) == 0:
                continue
            if card == newlist[1]
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72629,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(card) == 0:
                continue
            if card == newlist[1]:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72630,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2) - 1
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(card) == 0:
                continue
            if card == newlist[1]:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72631,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2) + 1
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(card) == 0:
                continue
            if card == newlist[1]:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72632,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if card == newlist[0]:
                continue
            if card == newlist[1]:
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72633,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        newlist = []
        newindex = (len(self.card_list) // 2)
        newlist.append(self.card_list[0])
        newlist.append(self.card_list[newindex])
        for card in self.card_list:
            if self.card_list.index(newlist[0]):
                continue
            if self.card_list.index(newlist[1]):
                continue
            else:
                newlist.append(card)    
        return newlist    

"
72671,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        lis1 = self.card_list[:mid]
        lis2 = self.card_list[mid:]
        lis = []
        for i in range(len(lis1)):
            lis.append(lis1[i])
            lis.append(lis2[i])
            
        self.card_list = lis

"
72672,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        lis1 = self.card_list[:mid]
        lis2 = self.card_list[mid:]
        lis = []
        for i in range(len(lis1)):
            lis.append(lis1[i])
            lis.append(lis2[i])
            
        if len(self.card_list0 %2 == 1:
            lis.append(lis2[-1])
            
        self.card_list = lis

"
72673,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        lis1 = self.card_list[:mid]
        lis2 = self.card_list[mid:]
        lis = []
        for i in range(len(lis1)):
            lis.append(lis1[i])
            lis.append(lis2[i])
            
        if len(self.card_list0 %2 == 1:
            lis.append(lis2[i])
            
        self.card_list = lis

"
72674,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        lis1 = self.card_list[:mid]
        lis2 = self.card_list[mid:]
        lis = []
        for i in range(len(lis1)):
            lis.append(lis1[i])
            lis.append(lis2[i])
            
        if len(self.card_list %2 == 1):
            lis.append(lis2[-1])
            
        self.card_list = lis

"
72675,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        lis1 = self.card_list[:mid]
        lis2 = self.card_list[mid:]
        lis = []
        for i in range(len(lis1)):
            lis.append(lis1[i])
            lis.append(lis2[i])
            
        if len(self.card_list0 %2 == 1):
            lis.append(lis2[-1])
            
        self.card_list = lis

"
72676,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        lis1 = self.card_list[:mid]
        lis2 = self.card_list[mid:]
        lis = []
        for i in range(len(lis1)):
            lis.append(lis1[i])
            lis.append(lis2[i])
            
        if len(self.card_list) %2 == 1:
            lis.append(lis2[-1])
            
        self.card_list = lis

"
73615,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        mid = len(self.card_list)//2
        lst1 = self.card_list[:mid]
        lst2 = self.card_list[mid:]
        for i in range(len(lst1)):
            new.append(lst1[i])
            new.append(lst2[i])
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        self.card_list = new

"
74171,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:]
        l2 = self.card_list[mid:]
        new_lst = []
        for i in range(len(l1)):
            new_lst.append(l1[i])
            new_lst.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_lst.append(l2[-1])
            self.card_list = new_lst
            
"
74172,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_lst = []
        for i in range(len(l1)):
            new_lst.append(l1[i])
            new_lst.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_lst.append(l2[-1])
            self.card_list = new_lst
            
"
74173,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_lst = []
        for i in range(len(l1)):
            new_lst.append(l1[i])
            new_lst.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_lst.append(l2[-1])
        self.card_list = new_lst
            
"
74829,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        L1 = self.card_list[:mid]
        L2 = self.card_list[mid:]
        new_list = []
        for i in range(len(L1)):
            new_list.append(L1[i])
            new_list.append(L2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(L2[-1])
        self.card_list = new_list
        

"
74833,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        L1 = self.card_list[:]
        L2 = self.card_list[mid:]
        new_list = []
        for i in range(len(L1)):
            new_list.append(L1[i])
            new_list.append(L2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(L2[-1])
        self.card_list = new_list
        

"
74853,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
76489,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        size = len(self.card_list)//2
        for i in len(self.card_list)//2:
            first.append(self.card_list[i])
            self.card_list.pop(i)
        for j in size:
            lst.append(first[j])
            lst.append(self.card_list[j])
            
        return lst
            

"
76494,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        size = len(self.card_list)//2
        for i in len(self.card_list)//2:
            first.append(self.card_list[i])
            self.card_list.pop(i)
        for j in size:
            lst.append(first[j])
            lst.append(self.card_list[j])
            
        return j
            

"
76496,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        mid = len(self.card_list)//2
        for i in len(self.card_list)//2:
            lst.append(self.card_list[i])
            lst.append(self.card_list[mid+i])
            
        return lst
            

"
76497,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        size = len(self.card_list)//2
        for i in range( len(self.card_list)//2):
            first.append(self.card_list[i])
            self.card_list.pop(i)
        for j in size:
            lst.append(first[j])
            lst.append(self.card_list[j])
            
        return lst
            

"
76498,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        mid = len(self.card_list)//2
        for i in range(len(self.card_list)//2):
            lst.append(self.card_list[i])
            lst.append(self.card_list[mid+i])
            
        return lst
            

"
76499,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        size = len(self.card_list)//2
        for i in range( len(self.card_list)//2):
            first.append(self.card_list[i])
            self.card_list.pop(i)
        for j in range (size):
            lst.append(first[j])
            lst.append(self.card_list[j])
            
        return lst
            

"
76500,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        mid = len(self.card_list)//2
        for i in range(len(self.card_list)//2):
            lst.append(self.card_list[i])
            lst.append(self.card_list[mid+i])
        self.card_list = lst    
        return self.card_list
            

"
76501,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        first = []
        #second = []
        lst = []
        if len(self.card_list) == 0:
            return self.card_list
        
        mid = len(self.card_list)//2
        for i in range(len(self.card_list)//2):
            lst.append(self.card_list[i])
            lst.append(self.card_list[mid+i])
        self.card_list = lst    
        return self.card_list
            

"
76502,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3+=[l1[i]]
            l3+=[l2[i]]
        if len(l2) > len(l1):
            l3+=[l2[-1]]
        self.card_list = l3
        return self.card_list
"
77417,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_card_list = []
        mid = len(self.card_list) // 2
        for i in range(mid):
            new_card_list.append(self.card_list[i])
            new_card_list.append(self.card_list[mid+i])
        if len(self.card_list) % 2 == 1:
            new_card_list.append(self.card_list[-1])
"
77422,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_card_list = []
        mid = len(self.card_list) // 2
        for i in range(mid):
            new_card_list.append(self.card_list[i])
            new_card_list.append(self.card_list[mid+i])
        if len(self.card_list) % 2 == 1:
            new_card_list.append(self.card_list[-1])
            
        for i in range(len(self.card_list)):
            self.card_list[i] = new_card_list[i]
"
77447,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
         

"
78103,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
         

"
78105,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
         random.shuffle(self.Card)

"
78135,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) ?? 2
        l1 = self.card_list[:mid] 
        l2 = self.card_list [mid:] 
        l3 = []
    for i in range (len(l1)):
        l3.append(l1[i])
        l3.append (l2[i])
    if len(12) > len(l1):
        l3.append(l2[-1])
    self.card_list = l3"
78136,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid] 
        l2 = self.card_list [mid:] 
        l3 = []
        for i in range (len(l1)):
            l3.append(l1[i])
            l3.append (l2[i])
        if len(12) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3"
78137,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid] 
        l2 = self.card_list[mid:] 
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append (l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3"
78983,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list)//2
        half1 = self.card_list[:mid]
        half2 = self.card_list[mid:]
        retlist = []
        for i in range(len(half1)):
            retlist.append(half1[i])
            retlist.append(half2[i])
        if len(self.card_list) % 2 == 1:
            retlist.append(half2[-1])
        self.card_list = retlist
        
        
        

"
79550,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def Shuffle(self):
        new_list = []
        2nd_list = []
        1st_list = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            if i >= x:
                2nd_list.append(self.card_list[i])
            else:
                1st_list.append(self.card_list[i])
        if len(self.card_list) % 2 == 0:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
        else:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
            new_list.append(2nd_list[x])
        return new_list
                
                
        "
79556,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def Shuffle(self):
        new_list = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            if i >= x:
                2nd_list.append(self.card_list[i])
            else:
                1st_list.append(self.card_list[i])
        if len(self.card_list) % 2 == 0:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
        else:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
            new_list.append(2nd_list[x])
        return new_list
                
                
        "
79562,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new_list = []
        first_list = []
        second_list = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            if i >= x:
                second_list.append(self.card_list[i])
            else:
                first_list.append(self.card_list[i])
        if len(self.card_list) % 2 == 0:
            for j in range(x):           
                new_list.append(first_list[j])
                new_list.append(second_list[j])
        else:
            for j in range(x):           
                new_list.append(first_list[j])
                new_list.append(second_list[j])
            new_list.append(second_list[x])
        return new_list
                
                
        "
79567,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def Shuffle(self):
        new_list = []
        1st_list = []
        2nd_list = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            if i >= x:
                2nd_list.append(self.card_list[i])
            else:
                1st_list.append(self.card_list[i])
        if len(self.card_list) % 2 == 0:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
        else:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
            new_list.append(2nd_list[x])
        return new_list
                
                
        "
79568,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def Shuffle(self):
        new_list = []
        first_list = []
        second_list = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            if i >= x:
                second_list.append(self.card_list[i])
            else:
                first_list.append(self.card_list[i])
        if len(self.card_list) % 2 == 0:
            for j in range(x):           
                new_list.append(first_list[j])
                new_list.append(second_list[j])
        else:
            for j in range(x):           
                new_list.append(first_list[j])
                new_list.append(second_list[j])
            new_list.append(second_list[x])
        return new_list
                
                
        "
79574,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def Shuffle(self):
        new_list = []
        x = len(self.card_list) // 2
        2nd_list = []
        1st_list = []
        for i in range(len(self.card_list)):
            if i >= x:
                2nd_list.append(self.card_list[i])
            else:
                1st_list.append(self.card_list[i])
        if len(self.card_list) % 2 == 0:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
        else:
            for j in range(x):           
                new_list.append(1st_list[j])
                new_list.append(2nd_list[j])
            new_list.append(2nd_list[x])
        return new_list
                
                
        "
80010,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def Shuffle(self):
        new_list = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            if i >= x:
                2st_list.append(self.card_list[i])
            else:
                1st_list.append(self.card_list[i])
        for j in range
        "
80990,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        self.shuffle_deck = []
        mid_index = len(self.card_list)//2
        first_half = self.card_list[:mid_index]
        last_half = self.card_list[mid_index:]
        for index in range(len(first_half)):
            shuffle_deck.append(first_half[index]+last_half[index])
        return shuffle_deck
        "
80997,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        self.shuffle_deck = []
        mid_index = len(self.card_list)//2
        first_half = self.card_list[:mid_index]
        last_half = self.card_list[mid_index:]
        for index in range(len(first_half)):
            shuffle_deck.append(first_half[index]+last_half[index])
            
        "
80999,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        
        mid_index = len(self.card_list)//2
        first_half = self.card_list[:mid_index]
        last_half = self.card_list[mid_index:]
        shuffle_deck = []
        for index in range(len(first_half)):
            shuffle_deck.append(first_half[index])
            shuffle_deck.append(last_half[index])
        if len(last_half)>len(first_half):
            shuffle_deck.append(last_half[-1])
        return shuffle_deck
        "
81001,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        
        mid_index = len(self.card_list)//2
        first_half = self.card_list[:mid_index]
        last_half = self.card_list[mid_index:]
        shuffle_deck = []
        for index in range(len(first_half)):
            shuffle_deck.append(first_half[index])
            shuffle_deck.append(last_half[index])
        if len(last_half)>len(first_half):
            shuffle_deck.append(last_half[-1])
        self.card_list = shuffle_deck
        "
81452,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuttle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list)% 2 == 1:
            new_list.append(l2[-1])
            self.card_list = new_list
            
        
       
"
81455,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list)% 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
        
       
"
81462,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuttle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
            if len(self.card_list)% 2 == 1:
                new_list.append(l2[-1])
            self.card_list = new_list
            
        
       
"
81468,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuttle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list)% 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
        
       
"
81621,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = self.card_list // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for card in range(len(l1)):
            new_list.append(l1[card])
            new_list.append(l2[card])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
    
    
   "
81622,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for card in range(len(l1)):
            new_list.append(l1[card])
            new_list.append(l2[card])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
            
    
    
   "
82219,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        new = []
        mid = len(self.card_list)//2
        lst1= self.card_list[:mid]
        lst2= self.card_list[mid:]
        for i in range(len(lst1)):
            new.append(lst1[i])
            new.append(lst2[i])
        if len(lst2) > len(lst1):
            new.append(lst2[-1])
        self.card_list = new
        

"
83662,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.list[:len(self.list)//2]
        b = self.list[len(self.list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        return c
        "
83663,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.card_list)//2]
        b = self.card_list[len(self.card_list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        return c
        "
83664,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.card_list)//2]
        b = self.card_list[len(self.card_list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        if len(b) % 2 == 1:
            c.append(b[-1])
        return c
        "
83665,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.card_list)//2]
        b = self.card_list[len(self.card_list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        if len(b) != len(a):
            c.append(b[-1])
        return c
        "
83666,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.list)//2]
        b = self.card_list[len(self.list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        return c
        "
83667,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            a.append(self.card_list(x))
            a.append(self.card_list(i+x))
        if len(self_card_list) % 2 == 1:
            a.append(self.card_list[-1])
        for m in range(len(self.card_list)):
            self.card_list[m] = a[m]
        "
83668,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.card_list)//2]
        b = self.card_list[len(self.card_list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        if len(self.card_list) % 2 != 0:
            c.append(b[-1])
        return c
        "
83669,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.card_list)//2]
        b = self.card_list[len(self.card_list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        if len(b) != len(a):
            c.append(b[len(b)-1])
        return c
        "
83670,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.card_list)//2]
        b = self.card_list[len(self.card_list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        if len(b) != len(a):
            c.append(b[len(b)])
        return c
        "
83671,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = self.card_list[:len(self.card_list)//2]
        b = self.card_list[len(self.card_list)//2:]
        c = []
        for x in range(len(a)):
            c.append(a[x])
            c.append(b[x])
        if len(self.card_list) % 2 != 0:
            c.append(b[-1])
        return c
        "
83672,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list) // 2):
            a.append(self.card_list(x))
            a.append(self.card_list(i+x))
        if len(self_card_list) % 2 == 1:
            a.append(self.card_list[-1])
        for m in range(len(self.card_list)):
            self.card_list[m] = a[m]
        
        "
83673,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list) // 2):
            a.append(self.card_list[i])
            a.append(self.card_list[i+x])
        if len(self_card_list) % 2 == 1:
            a.append(self.card_list[-1])
        for m in range(len(self.card_list)):
            self.card_list[m] = a[m]
        
        "
83674,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list) // 2):
            a.append(self.card_list[i])
            a.append(self.card_list[i+x])
        if len(self.card_list) % 2 == 1:
            a.append(self.card_list[-1])
        for m in range(len(self.card_list)):
            self.card_list[m] = a[m]
        
        "
83675,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            a.append(self.card_list(x))
            a.append(self.card_list(i+x))
        if len(self_card_list) % 2 == 1:
            a.append(self.card_list[-1])
        return a
        "
83676,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list)):
            a.append(self.card_list(x))
            a.append(self.card_list(i+x))
        if len(self_card_list) % 2 == 1:
            a.append(self.card_list[-1])
        for m in range(len(self.card_list)):
            self.card_list[m] = a[m]
        
        "
83677,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        a = []
        x = len(self.card_list) // 2
        for i in range(len(self.card_list) // 2):
            a.append(self.card_list(i))
            a.append(self.card_list(i+x))
        if len(self_card_list) % 2 == 1:
            a.append(self.card_list[-1])
        for m in range(len(self.card_list)):
            self.card_list[m] = a[m]
        
        "
83695,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle:
        shuffled = []
        mid == len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            shuffled.append(l1[i])
            shuffled.append(l2[i])
        if len(self.card_list) % 2 == 1:
            shuffled.append(l2[-1])
        self.card_list = shuffled
            
"
83696,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        shuffled = []
        mid == len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            shuffled.append(l1[i])
            shuffled.append(l2[i])
        if len(self.card_list) % 2 == 1:
            shuffled.append(l2[-1])
        self.card_list = shuffled
            
"
83697,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        shuffled = []
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        for i in range(len(l1)):
            shuffled.append(l1[i])
            shuffled.append(l2[i])
        if len(self.card_list) % 2 == 1:
            shuffled.append(l2[-1])
        self.card_list = shuffled
            
"
84370,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
        

"
84371,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = 13
        

"
84907,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.car_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
            "
84908,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.car_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
            "
84909,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.car_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list
            "
84910,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 ==1:
            new_list.append(l2[-1])
        self.card_list = new_list
            "
85547,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck, halfdeck*2):
            lst2.append(self.card_list[i])
            
        return list(zip(lst1, lst2))
                

"
85561,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck, halfdeck*2):
            lst2.append(self.card_list[i])
                

"
85563,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        for i in range(halfdeck):
            lst1.append(self.card_list[i])
        return lst1
                

"
85564,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck + 1):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck, halfdeck*2):
            lst2.append(self.card_list[i])
            
        return list(zip(lst1, lst2))
                

"
85565,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck + 1, halfdeck*2):
            lst2.append(self.card_list[i])
            
        return list(zip(lst1, lst2))
                

"
85568,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck, halfdeck*2):
            lst2.append(self.card_list[i])
            
        return list(zip(lst1, lst2))
                

"
85569,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = output[:halfdeck]
        lst2 = output[halfdeck:]
        tuplst = list(zip(lst1, lst2))
        finallst = []
        for tup in tuplst:
            finallst.append(tup[0])
            finallst.append(tup[1])
        return finallst

a1 = Deck()
print(a1.shuffle())"
85570,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck + 1):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck, halfdeck*2):
            lst2.append(self.card_list[i])
            
        return list(zip(lst1, lst2))
                

"
85571,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck + 1):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck, halfdeck*2 + 1):
            lst2.append(self.card_list[i])
            
        return list(zip(lst1, lst2))
                

"
85572,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = self.card_list[:halfdeck]
        lst2 = self.card_list[halfdeck:]
            
        return list(zip(lst1, lst2))
                

"
85573,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = []
        lst2 = []
        for i in range(halfdeck):
            lst1.append(self.card_list[i])
            
        for i in range(halfdeck, halfdeck*2):
            lst2.append(self.card_list[i])
            
        return list(zip(lst1, lst2))
                

"
85574,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = self.card_list[:halfdeck]
        lst2 = self.card_list[halfdeck:]
        tuplst = list(zip(lst1, lst2))
        finallst = []
        for tup in tuplst:
            finallst.append(tup[0])
            finallst.append(tup[1])
        return finallst

a1 = Deck()
print(a1.shuffle())"
85575,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = self.card_list[:halfdeck]
        lst2 = self.card_list[halfdeck:]
        return list(zip(lst1, lst2))
                

a1 = Deck()
print(a1.shuffle())"
85577,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = self.card_list[:halfdeck]
        lst2 = self.card_list[halfdeck:]
        tuplst = list(zip(lst1, lst2))
        finallst = []
        for tup in tuplst:
            finallst.append(tup[0])
            finallst.append(tup[1])
        return finallst

a1 = Deck()
print(a1.shuffle())"
85578,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = self.card_list[:halfdeck]
        lst2 = self.card_list[halfdeck:]
        tuplst = list(zip(lst1, lst2))
        finallst = []
        for tup in tuplst:
            finallst.append(tup[0])
            finallst.append(tup[1])
        return finallst

a1 = Deck()
print(a1.shuffle())"
85579,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        lst1 = self.__init__[:halfdeck]
        lst2 = self.__init__[halfdeck:]
        tuplst = list(zip(lst1, lst2))
        finallst = []
        for tup in tuplst:
            finallst.append(tup[0])
            finallst.append(tup[1])
        return finallst

a1 = Deck()
print(a1.shuffle())"
85580,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        l1 = self.card_list[:halfdeck]
        l2 = self.card_list[halfdeck:]
      
        newlst = []
        
        for i in range(len(l1)):
            newlst.append(l1[i])
            newlst.append(l2[i])
        if len(self.card_list) % 2 == 1:
            newlst.append(l2[-1])
      
"
85582,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        l1 = self.card_list[:halfdeck]
        l2 = self.card_list[halfdeck:]
        tuplst = list(zip(lst1, lst2))
        newlst = []
        
        for i in range(len(l1)):
            newlst.append(l1[i])
            newlst.append(l2[i])
        if len(self.card_list) % 2 == 1:
            newlst.append(l2[-1])
      
"
85583,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        halfdeck = len(self.card_list)//2
        l1 = self.card_list[:halfdeck]
        l2 = self.card_list[halfdeck:]
      
        newlst = []
        
        for i in range(len(l1)):
            newlst.append(l1[i])
            newlst.append(l2[i])
        if len(self.card_list) % 2 == 1:
            newlst.append(l2[-1])
        self.card_list = newlst
      
"
85717,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
            

"
85719,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
            
d = Deck()
print(d.shuffle())"
85720,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
c = Card(suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""])            
d = Deck()
print(d.shuffle())"
85721,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
c = Card()            
d = Deck()
print(d.shuffle())"
85723,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
c = Card(suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""],
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""])            
d = Deck()
print(d.shuffle())"
85724,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
c = Card()            
d = Deck()
print(d.shuffle())"
85725,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
c = Card([""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""],
    [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""])            
d = Deck()
print(d.shuffle())"
85726,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
c = Card([""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""],
    [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""])     
print(c)
d = Deck()
print(d.shuffle())"
85727,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half) -1):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
print(Deck())
"
85728,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        self.card_list = new
    
print(Deck())
"
85729,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
   "
85730,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
print(Deck())
   "
85731,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
print(Deck().shuffle())
"
85732,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
print(Deck())
"
85733,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half) + 1):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
print(Deck())
"
85734,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        print(first_half)
        second_half = self.card_list[mid:]
        print(second_half)
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        return new
    
print(Deck())
"
85735,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
        if len(self.card_list) % 2 == 1:
             new.append(second_half[-1])
        self.card_list = new
    
print(Deck())
"
85736,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        new = []
        mid = len(self.card_list) // 2
        first_half = self.card_list[:mid]
        second_half = self.card_list[mid:]
        for idx in range(len(first_half)):
            new.append(first_half[idx])
            new.append(second_half[idx])
            if len(self.card_list) % 2 == 1:
                new.append(second_half[-1])
        self.card_list = new
    
print(Deck())
"
86756,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self): 
        mid - len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list
            
            

"
86757,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self): 
        mid - len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new list
            
            

"
86758,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self): 
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(12[-1])
        self.card_list = new_list
            
            

"
87381,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        return new_list

"
87382,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
        return self.card_list

"
87383,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        return new_list

"
87384,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list) % 2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
        return self.card_list

"
87394,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
87955,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
            for i in range (len(l1)):
                l3.append(l1[i])
                l3.append(l2[i])
        if len(12)> len(l1):
            l3.append(l2[-1])
        self.card_list= l3
                         "
87957,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range (len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(12)> len(l1):
            l3.append(l2[-1])
        self.card_list= l3
                         "
87959,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range (len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(12)> len(l1):
            l3.append(l2[-1])
        self.card_list= l3
                         
"
87960,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []

        for i in range (len(l1)):
            l3. append(l1[i])
            l3.append(l2[i])
        if len(12)> len(l1):
            l3.append(l2[-1])
        self.card_list= l3
                         
"
87961,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list)//2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        
        for i in range (len(l1)):
            l3. append(l1[i])
            l3.append(l2[i])
        if len(12)> len(l1):
            l3.append(l2[-1])
        self.card_list= l3
                         
"
87962,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

def shuffle(self):
    mid = len(self.card_list)//2
    l1 = self.card_list[:mid]
    l2 = self.card_list[mid:]
    l3 = []

    for i in range (len(l1)):
        l3. append(l1[i])
        l3.append(l2[i])
    if len(12)> len(l1):
        l3.append(l2[-1])
    self.card_list= l3
                         
"
87963,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3
        "
87965,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
            for i in range (len(l1)):
                l3.append(l1[i])
                l3.append(l2[i])
            if len(12)> len(l1):
                l3.append(l2[-1])
            self.card_list= l3
                         "
87966,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
87967,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output"
87968,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(12) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3"
87969,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output

"
88641,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    def shuffle(self):
        mid = len(self.card_list) // 2
        lis1 = self.card_list[:mid]
        lis2 = self.card_list[mid:]
        lis = []
        for i in range(len(lis1)):
            lis.append(lis1[i])
            lis.append(lis2[i])
            
        if len(self.card_list) %2 == 1:
            lis.append(lis2[-1])
            
        self.card_list = lis

"
89271,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) //2
        l1 = self.card_list[:mid]
        l2 = self. card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(self.card_list)%2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
     
            
"
89272,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) //2
        l1 = self.card_list[:mid]
        l2 = self. card_list[mid:]
        new_list = []
        for i in range(len(l1)):
            new_list.append(l1[i])
            new_list.append(l2[i])
        if len(seld.card_list)%2 == 1:
            new_list.append(l2[-1])
        self.card_list = new_list
            
     
            
"
89891,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = ceil(len(self.card_list) / 2)
        first_half = []
        second_half = []
        for i in range(0, index + 1):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89892,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half.empty() or not second_half.empty():
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89893,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half and not second_half:
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89903,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            "
89904,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89905,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(first_half)
        print(second_half)
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        return shuffled_deck"
89906,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while (bool):
    # while (not first_half.empty() or not second_half.empty()):
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89907,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index + 1):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89908,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        return shuffled_deck"
89909,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
                continue
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
                continue
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
                continue
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89910,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(len(self.card_list))
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        return shuffled_deck"
89911,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89912,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while (not first_half.empty() or not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89913,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while (true):
    # while (not first_half.empty() or not second_half.empty()):
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89914,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89915,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        return shuffled_deck"
89916,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
                continue
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
                continue
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
                continue
        return shuffled_deck"
89917,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89918,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while (not first_half.empty() and not second_half.empty()):
            if first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89919,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89920,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index - 1, len(self.card_list) - 1):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89921,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = true
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while (bool):
    # while (not first_half.empty() or not second_half.empty()):
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89922,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        whiel (true):
    # while (not first_half.empty() or not second_half.empty()):
            if first_half.empty() and second_half.empty():
                return shuffled_deck
            elif first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89923,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half and not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89924,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while (not first_half.empty() or not second_half.empty()):
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89925,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while (not first_half.empty() or not second_half.empty()):
            if first_half.empty() and second_half.empty():
                print(""SIZEE of shuffled deck is "", len(shuffled_deck))
                return shuffled_deck
            elif first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89926,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]

        self.__str__()
        print(first_half)
        print(second_half)
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89927,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = ceil(len(self.card_list) / 2)
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(len(self.card_list))
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89928,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index - 1, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89929,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        self.shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                self.shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                self.shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                self.shuffled_deck.append(first_half[0])
                first_half.pop()
                self.shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(self.shuffled_deck))
        return self.shuffled_deck"
89930,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = ceil(len(self.card_list) / 2)
        first_half = []
        second_half = []
        for i in range(0, index + 1):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89931,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        self.shuffled_deck = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
       # self.shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                self.shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                self.shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                self.shuffled_deck.append(first_half[0])
                first_half.pop()
                self.shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(self.shuffled_deck))
        return self.shuffled_deck"
89932,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = ceil(len(self.card_list) / 2)
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
       # print(len(self.card_list))
       # print(len(first_half))
       # print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89933,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = ceil(len(self.card_list) / 2)
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(len(self.card_list))
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
           # if first_half.empty():
            #    print(""first half is empty"")
             #   shuffled_deck.append(second_half[0])
              #  second_half.pop()
            if second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89934,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(self.card_list.__str__())
        print(first_half)
        print(second_half)
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89935,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = ceil(len(self.card_list) / 2)
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(len(self.card_list))
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89936,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(self.card_list)
        print(first_half)
        print(second_half)
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89937,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        print(len(self.card_list))
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89938,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = []
        second_half = []
        for i in range(0, index):
            first_half.append(self.card_list[i])
        for i in range(index, len(self.card_list)):
            second_half.append(self.card_list[i])
        self.__str__()
        print(first_half)
        print(second_half)
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89939,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        print(index - 1)
        print(len(self.card_list) - 1)
        first_half = self.card_list[0:index + 1]
        second_half = self.card_list[index:len(self.card_list) - 1]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89940,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index - 1]
        second_half = self.card_list[index:len(self.card_list) - 1]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89941,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]

        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        bool = True
        print(""initialized shuffled deck. size is "", len(shuffled_deck))
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89942,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89943,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else first_half and second_half:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89944,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else if :
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89945,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if first_half.empty():
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif second_half.empty():
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                break
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        return shuffled_deck"
89946,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else first_half and second_half:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89947,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89948,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        first_half = self.card_list[0:index - 1]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89949,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        print(index - 1)
        print(len(self.card_list) - 1)
        first_half = self.card_list[0:index - 1]
        second_half = self.card_list[index:len(self.card_list) - 1)]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89950,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        print(index - 1)
        print(len(self.card_list) - 1)
        first_half = self.card_list[0:index - 1]
        second_half = self.card_list[index:len(self.card_list) - 1]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89951,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = (len(self.card_list) // 2) + 1
        first_half = self.card_list[:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        start = 0
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                self.card_list[start] = second_half[0]
                start += 1
              #  shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
               # shuffled_deck.append(first_half[0])
                self.card_list[start] = first_half[0]
                start += 1
                first_half.pop()
            else:
                print(""appending both"")
                self.card_list[start] = first_half[0]
                start += 1
              #  shuffled_deck.append(first_half[0])
                first_half.pop()
                self.card_list[start] = second_half[0]
                start += 1
               # shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89952,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        print(index - 1)
        print(len(self.card_list) - 1)
        first_half = self.card_list[0:index + 1]
        second_half = self.card_list[(index + 1):]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89953,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        print(index - 1)
        print(len(self.card_list) - 1)
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
            else:
                print(""appending both"")
                shuffled_deck.append(first_half[0])
                first_half.pop()
                shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89955,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = len(self.card_list) // 2
        print(index - 1)
        print(len(self.card_list) - 1)
        first_half = self.card_list[0:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        start = 0
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                self.card_list[start] = second_half[0]
                start += 1
              #  shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
               # shuffled_deck.append(first_half[0])
                self.card_list[start] = first_half[0]
                start += 1
                first_half.pop()
            else:
                print(""appending both"")
                self.card_list[start] = first_half[0]
                start += 1
              #  shuffled_deck.append(first_half[0])
                first_half.pop()
                self.card_list[start] = second_half[0]
                start += 1
               # shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89956,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = (len(self.card_list) // 2)
        first_half = self.card_list[:index]
        second_half = self.card_list[index:]
        self.__str__()
        print(len(first_half))
        print(len(second_half))
        shuffled_deck = []
        start = 0
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                self.card_list[start] = second_half[0]
                start += 1
              #  shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
               # shuffled_deck.append(first_half[0])
                self.card_list[start] = first_half[0]
                start += 1
                first_half.pop()
            else:
                print(""appending both"")
                self.card_list[start] = first_half[0]
                start += 1
              #  shuffled_deck.append(first_half[0])
                first_half.pop()
                self.card_list[start] = second_half[0]
                start += 1
               # shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89959,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = (len(self.card_list) // 2)
        first_half = self.card_list[:index]
        second_half = self.card_list[index:]
        print(len(first_half))
        print(len(second_half))
        start = 0
        self.card_list = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                self.card_list.append(second_half[0])
                start += 1
              #  shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
               # shuffled_deck.append(first_half[0])
                self.card_list.append(first_half[0])
                start += 1
                first_half.pop()
            else:
                print(""appending both"")
                self.card_list.append(first_half[0])
                start += 1
              #  shuffled_deck.append(first_half[0])
                first_half.pop()
                self.card_list.append(second_half[0])
                start += 1
               # shuffled_deck.append(second_half[0])
                second_half.pop()"
89960,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = (len(self.card_list) // 2)
        first_half = self.card_list[:index]
        second_half = self.card_list[index:]
        print(len(first_half))
        print(len(second_half))
        start = 0
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                self.card_list[start] = second_half[0]
                start += 1
              #  shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
               # shuffled_deck.append(first_half[0])
                self.card_list[start] = first_half[0]
                start += 1
                first_half.pop()
            else:
                print(""appending both"")
                self.card_list[start] = first_half[0]
                start += 1
              #  shuffled_deck.append(first_half[0])
                first_half.pop()
                self.card_list[start] = second_half[0]
                start += 1
               # shuffled_deck.append(second_half[0])
                second_half.pop()
        
        print(""DONE WITH WHILE LOOP"")
        print(""size of shuffled deck is "", len(shuffled_deck))
        self.card_list = shuffled_deck"
89961,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = (len(self.card_list) // 2)
        first_half = self.card_list[:index]
        second_half = self.card_list[index:]
        print(len(first_half))
        print(len(second_half))
        start = 0
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                self.card_list[start] = second_half[0]
                start += 1
              #  shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
               # shuffled_deck.append(first_half[0])
                self.card_list[start] = first_half[0]
                start += 1
                first_half.pop()
            else:
                print(""appending both"")
                self.card_list[start] = first_half[0]
                start += 1
              #  shuffled_deck.append(first_half[0])
                first_half.pop()
                self.card_list[start] = second_half[0]
                start += 1
               # shuffled_deck.append(second_half[0])
                second_half.pop()"
89963,mult_class_card_and_deck_practice_ac,"from math import ceil
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        index = (len(self.card_list) // 2)
        first_half = self.card_list[:index]
        second_half = self.card_list[index:]
        print(len(first_half))
        print(len(second_half))
        start = 0
        self.card_list = []
        while not first_half or not second_half:
            if not first_half:
                print(""first half is empty"")
                self.card_list[start] = second_half[0]
                start += 1
              #  shuffled_deck.append(second_half[0])
                second_half.pop()
            elif not second_half:
                print(""second half is empty"")
               # shuffled_deck.append(first_half[0])
                self.card_list[start] = first_half[0]
                start += 1
                first_half.pop()
            else:
                print(""appending both"")
                self.card_list[start] = first_half[0]
                start += 1
              #  shuffled_deck.append(first_half[0])
                first_half.pop()
                self.card_list[start] = second_half[0]
                start += 1
               # shuffled_deck.append(second_half[0])
                second_half.pop()"
91334,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) ?? 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(12) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
91335,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(l2) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
91336,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        mid = len(self.card_list) // 2
        l1 = self.card_list[:mid]
        l2 = self.card_list[mid:]
        l3 = []
        for i in range(len(l1)):
            l3.append(l1[i])
            l3.append(l2[i])
        if len(12) > len(l1):
            l3.append(l2[-1])
        self.card_list = l3

"
91460,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 0:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 1:
                deck2.append(card)
        for i in range(len(deck1)):
            shuffled.append(deck1[i])
            shuffled.append(deck2[i])
        return shuffled
"
91462,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 1:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 0:
                deck2.append(card)
        shuffled.append(self.card_list[0])
        for i in range(len(deck2)):
            shuffled.append(deck2[i])
            shuffled.append(deck1[i])
        return shuffled
"
91463,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 0:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 1:
                deck2.append(card)
        shuffled.append(self.card_list[0])
        for i in range(len(deck1)):
            shuffled.append(deck1[i])
            shuffled.append(deck2[i])
        print(shuffled)
        return shuffled
"
91464,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 1:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 0:
                deck2.append(card)
        shuffled.append(self.card_list[0])
        for i in range(len(deck1)):
            shuffled.append(deck2[i])
            shuffled.append(deck1[i])
        return shuffled
"
91465,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def Deck():
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 0:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 1:
                deck2.append(card)
        for i in range(len(deck1)):
            shuffled.append(deck1[i])
            shuffled.append(deck2[i])
        return shuffled
"
91466,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 0:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 1:
                deck2.append(card)
        shuffled.append(self.card_list[0]
        for i in range(len(deck1)):
            shuffled.append(deck1[i])
            shuffled.append(deck2[i])
        print(shuffled)
        return shuffled
"
91467,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 1:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 0:
                deck2.append(card)
        shuffled.append(self.card_list[0])
        for i in range(len(deck1)):
            shuffled.append(deck1[i])
            shuffled.append(deck2[i])
        print(shuffled)
        return shuffled
"
91468,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 1:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 0:
                deck2.append(card)
        for i in range(len(deck1)):
            shuffled.append(deck1[i])
            shuffled.append(deck2[i])
        print(shuffled)
        return shuffled
"
91469,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 1:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 0:
                deck2.append(card)
        shuffled.append(self.card_list[0])
        for i in range(len(deck1)):
            shuffled.append(deck2[i])
            shuffled.append(deck1[i])
        print(shuffled)
        return shuffled
"
91470,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 1:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 0:
                deck2.append(card)
        for i in range(len(deck1)):
            shuffled.append(deck2[i])
            shuffled.append(deck1[i])
        print(shuffled)
        return shuffled
"
91471,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        deck1 = []
        deck2 = []
        shuffled = []
        for card in self.card_list:
            if self.card_list.index(card)%2 == 1:
                deck1.append(card)
            elif self.card_list.index(card)%2 == 0:
                deck2.append(card)
        shuffled.append(self.card_list[0])
        for i in range(len(deck2)):
            shuffled.append(deck1[i])
            shuffled.append(deck2[i])
        return shuffled
"
92006,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        shuffle(self.card_list)

"
92012,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self, index = 1, incr = 0):
        if index > (len(self.card_list) // 2):
            element = self.card_list.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
        else:
            element = self.card_list.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
            shuffle(self.card_list, index + 2, incr + 1)

"
92036,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self, index = 1, incr = 0):
        if index > (len(self.card_list) // 2):
            element = self.card_list.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
            return cards
        else:
            element = cards.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
            return shuffle(self.card_list, index + 2, incr + 1)

"
92037,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self, index == 1, incr = 0):
        if index > (len(self.card_list) // 2):
            element = self.card_list.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
            return cards
        else:
            element = cards.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
            return shuffle(self.card_list, index + 2, incr + 1)

"
92038,mult_class_card_and_deck_practice_ac,"import random
class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        random.shuffle(self.card_list)

"
92039,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if (len(card_list) % 2) == 0:
            h1 = [:((len(card_list) // 2) - 1)]
            h2 = [(len(card_list) // 2):]
        else:
            h1 = [:((len(card_list) // 2) - 1)]
            h2 = [(len(card_list) // 2):]
       
        th = []
        
        if len(h1) < len(h2):
            for a in len(h1):
                th.append(h1[a])
                th.append(h2[a])
                
            for b in range(len(h2) - len(h1) - 1):
                th.append(h2[b])
                
            if len(h2) < len(h1):
                for c in len(h1):
                    th.append(h1[c])
                    th.append(h2[c])
                
            for d in range(len(h1) - len(h2) - 1):
                th.append(h2[d])

"
92040,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if (len(card_list) % 2) == 0:
            h1 = [:((len(self.card_list) // 2) - 1)]
            h2 = [(len(self.card_list) // 2):]
        else:
            h1 = [:((len(self.card_list) // 2) - 1)]
            h2 = [(len(self.card_list) // 2):]
       
        th = []
        
        if len(h1) < len(h2):
            for a in len(h1):
                th.append(h1[a])
                th.append(h2[a])
                
            for b in range(len(h2) - len(h1) - 1):
                th.append(h2[b])
                
            if len(h2) < len(h1):
                for c in len(h1):
                    th.append(h1[c])
                    th.append(h2[c])
                
            for d in range(len(h1) - len(h2) - 1):
                th.append(h2[d])

"
92041,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self):
        if (len(card_list) % 2) == 0:
            h1 = [0:((len(self.card_list) // 2) - 1)]
            h2 = [(len(self.card_list) // 2):]
        else:
            h1 = [:((len(self.card_list) // 2) - 1)]
            h2 = [(len(self.card_list) // 2):]
       
        th = []
        
        if len(h1) < len(h2):
            for a in len(h1):
                th.append(h1[a])
                th.append(h2[a])
                
            for b in range(len(h2) - len(h1) - 1):
                th.append(h2[b])
                
            if len(h2) < len(h1):
                for c in len(h1):
                    th.append(h1[c])
                    th.append(h2[c])
                
            for d in range(len(h1) - len(h2) - 1):
                th.append(h2[d])

"
92042,mult_class_card_and_deck_practice_ac,"class Card:

    suit_names = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]
    rank_names = [""Ace"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",  ""10"", ""Jack"", ""Queen"", ""King""]

    def __init__(self, suit=0, rank = 0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return Card.rank_names[self.rank] + "" of "" + Card.suit_names[self.suit]

class Deck:

    def __init__(self):
        self.card_list = []
        for i in range(len(Card.suit_names)):
            for j in range(len(Card.rank_names)):
                self.card_list.append(Card(i, j))

    def __str__(self):
        output = """"
        for card in self.card_list:
            output += card.__str__() + "", ""
        return output
    
    def shuffle(self, index = 1, incr = 0):
        if index > (len(self.card_list) // 2):
            element = self.card_list.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
        else:
            element = self.card_list.pop((len(self.card_list) // 2) + incr)
            self.card_list.insert(index, element)
            self.shuffle(index + 2, incr + 1)

"
