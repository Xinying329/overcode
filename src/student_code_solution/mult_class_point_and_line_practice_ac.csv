,acid,anon_code
2541,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, point_a, point_b):
        self.point_a = point_a
        self.point_b = point_b
        
    def length(self):
        l = self.point_a.distance(self.point_b)
        return l
        
point1 = Point(0,0)
point2 = Point(85,60)
line1 = Line(point1, point2)
print(line1.length())"
2542,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, point_a, point_b):
        self.point_a = point_a
        self.point_b = point_b
        
    def length(self):
        l = point_a.distance(point_b)
        return l
        

"
2543,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, point_a, point_b):
        self.point_a = point_a
        self.point_b = point_b
        
    def length(self):
        l = self.point_a.distance(self.point_b)
        return l
        
point1 = Point(10,10)
point2 = Point(100,100)
line1 = Line(point1, point2)
print(line1.length())"
2544,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, point_a, point_b):
        self.point_a = point_a
        self.point_b = point_b
        
    def length(self):
        l = self.point_a.distance(self.point_b)
        return l
        
point1 = Point(10,10)
point2 = Point(100,100)
line1 = Line(point1, point2)
print(line.length()
"
2545,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, point_a, point_b):
        self.point_a = point_a
        self.point_b = point_b
        
    def length(self):
        l = self.point_a.distance(self.point_b)
        return l
        
point1 = Point(10,10)
point2 = Point(100,100)
line1 = Line(point1, point2)
print(line.length()"
2546,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, point_a, point_b):
        self.point_a = point_a
        self.point_b = point_b
        
    def length(self):
        l = self.point_a.distance(self.point_b)
        return l
        
point1 = Point(10,10)
point2 = Point(100,100)
line1 = Line(point1, point2)
print(line.length())"
2547,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
2877,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, point_a, point_b):
        self.point_a = point_a
        self.point_b = point_b
        
    def length(self):
        l = self.point_a.distance(self.point_b)
        return l
        

"
4052,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        line_len =self.p1.distance(self.p2)
        return line_len

"
4059,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        line_len =self.p1.distance(p2)
        return line_len

"
17121,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1=point1
        self.point2=point2
    def length(self):
        return self.point1.distance(point2)
        
"
17123,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1=point1
        self.point2=point2
    def length(self):
        return self.point1.distance(self.point2)
        
"
17148,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.point1 = p1
        self.point2 = p2
        
    def length(self):
        return self.point1.distance(point2)
    

"
17150,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        point1 = p1
        point2 = p2
        
    def length(self):
        return point1.distance(point2)
    

"
17151,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.point1 = p1
        self.point2 = p2
        
    def length(self):
        return self.point1.distance(self.point2)
    

"
17807,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        total = self.p1.distance(self.p2)
        return total


"
17808,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
17809,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        total = self.p1.distance(self.p2)
        return total


"
17810,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        total = self.p1.distance(self.p2)
        return total


"
18506,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        total = self.p1.distance(self.p2)
        return total

"
18510,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self)
        return self.distance()

"
18511,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return self.distance()

"
18513,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        total = self.p1.distance(self.p2)
        return total

"
18514,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)

"
18515,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        total = self.p1.distance(self.p2)
        return total

"
18547,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
18551,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
18573,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
19236,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
19791,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)"
19796,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)"
20474,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

        def __init__(self, p1, p2):
            self.p1 = p1
            self.p2 = p2
            
        def length(self):
            return self.p2.distance(self.p1)
"
20485,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

        def __init__(self, p1, p2):
            self.p1 = p1
            self.p2 = p2
            
        def length(self):
            return p2.distance(p1)
"
21186,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)
"
21233,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
21821,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, Point(x1,y1), Point(x2,y2)):
        self.p1 = Point(x1,y1)
        self.p2 = Point(x2,y2)
    def length(self):
        p1.distance(p2)

"
21823,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        p1.distance(p2)

"
21825,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        (self.p1).distance(self.p2)

"
21826,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        self.p1.distance(self.p2)

"
21829,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        (self.p1.x).distance(self.p2.y)

"
21830,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        (self.p1).distance(self.p2)

"
21831,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
21849,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        self.p1.distance(self.p2)

"
23758,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        length = self.p1.distance(self.p2)
        return length

"
23760,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        length = self.p1.distance(p2)
        return length

"
23769,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
23770,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        length = self.p1.distance(self.p2)
        return length


"
23795,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
23797,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.distance()
"
23798,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return Point.distance(self, self.x)
"
23799,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.initX = initX
        self.initY = initY
        
    def length(self):
        return Point().distance
"
23800,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return Point().distance
"
23801,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return Point.distance()
"
23802,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.x.distance(self.y)
"
25114,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance +p2.distance

"
25115,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance + self.p2.distance

"
25118,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        distance = Point.distance()
        return distance

"
25119,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point):
        self.point = point
        
    def length(self):
        return Point().distance(self, self.point)

"
25121,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point):
        self.point = point
        
    def length(self):
        return Point.distance(self, self.point)

"
25122,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        distance = self.distance()
        return distance

"
25124,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        distance = Point.distance(self,p1) + Point.distance(self,p2)
        return distance

"
25125,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        distance1 = Point.distance(self,self.p1)
        distance2 = Point.distance(self,self.p2)
        return distance1 + distance2

"
25126,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return Point().distance
"
25127,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        distance = point.distance()
        return distance

"
25128,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, Point):
        self.Point = Point
        
    def length(self):
        return Point.distance(self)

"
25129,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        distance = Point.distance(self,self.p1) + Point.distance(self,self.p2)
        return distance

"
25130,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return super().distance
"
25131,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        distance1 = super().distance(self, self.p1)
        distance2 = super().distance(self, self.p2)
        return distance1 + distance2
        
"
25754,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,initx1,inity1):
        self.x1 = initx1
        self.y1 = inity1

        
    def length(self):
        return self.x1.distance(self.y1)
        
        

"
25770,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        """""" Create a new point at the given coordinates. """"""
        self.p1 = p1
        self.p2 = p2
        
        
    def length(self):
        return self.p1.distance(self.p2)
        

"
27267,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line: 
    def __init__(self, p1, p2): 
        self.p1 = p1 
        self.p2 = p2
    def length(self): 
        total.self.p1.distance(self.p2)
        return total
        
        

"
27268,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line: 
    def __init__(self, p1, p2): 
        self.p1 = p1 
        self.p2 = p2
    def length(self): 
        total = total.self.p1.distance(self.p2)
        return total
        
        

"
27269,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line: 
    def __init__(self, p1, p2): 
        self.p1 = p1 
        self.p2 = p2
    def length(self): 
        total = 0 
        total = total.self.p1.distance(self.p2)
        return total
        
        

"
27270,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line: 
    def __init__(self, p1, p2): 
        self.p1 = p1 
        self.p2 = p2
    def length(self): 
        total = 0 
        total = str(total.self.p1.distance(self.p2))
        return total
        
        

"
27272,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line: 
    def __init__(self, p1, p2): 
        self.p1 = p1 
        self.p2 = p2
    def length(self): 
        total = 0 
        total = self.p1.distance(self.p2)
        return total
        
        

"
27273,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
27274,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line: 
    def __init__(self, p1, p2): 
        self.p1 = p1 
        self.p2 = p2
    def length(self): 
        total = 0 
        #total = str(total.self.p1.distance(self.p2))
        return total
        
        

"
27503,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
28440,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
28478,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY, finX, finY):
        self.x = initX
        self.y = initY
        self.a = finX
        self.b = finY
        

"
28479,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
        
    def length(self):
        
    


"
28481,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
        
    def length(self):
        return self.point_1.distance(self.point_2) 
        
    


"
28482,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
        
    def length(self):
        return distance(self.point_1, self.point_2) 
        
    


"
28483,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
        
    def length(self):
        return self.point_1.distance(self, self.point_2) 
        
    


"
29489,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        length = self.pt1.distance(self.pt2)
        return length

"
29491,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        length = self.pt1.distance(self.pt2)
        return length

"
29492,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        length = self.pt1.distance(self, self.pt2)
        return length

"
29493,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        length = distance(self, self.pt2)
        return length

"
29494,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        length = pt1.distance(self, pt2)
        return length

"
29495,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        return self.pt1.distance(self.pt2)

"
29496,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        length = self.pt1distance(self, self.pt2)
        return length

"
29497,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
    
    def length(self):
        return self.pt1.distance(self.pt2)

"
29498,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt1
    
    def length(self):
        length = self.pt1distance(self.pt2)
        return length

"
29511,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def length(self):
        point.distance(self.x,self.y)

"
29512,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def length(self):
        Point.distance(self.x,self.y)

"
29513,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def length(self):
        distance(self.x,self.y)

"
29514,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def distance(self)
        self.distance(x,y)

"
29515,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def distance(self):
        self.distance(x,y)

"
29516,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def length(self):
        return self.x.distance(self.y)

"
29517,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def length(self):
        self.distance(x,y)

"
30278,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
"
30279,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2)
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
"
30283,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
"
30313,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
30315,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
31152,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.istance(self.p2)

"
31154,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
31174,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
32606,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    def length():
        return p1.distance(p2)
"
32608,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
32609,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return p1.distance(p2)
"
33153,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        length = self.p1.distance(self.p1)
        length += self.p2.distance(self.p2)
    

"
33155,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        length = self.p1.distance(self.p1)
        length += self.p2.distance(self.p2)
        return length
    

"
33158,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        length = self.p1.distance(self.p2)
        #length += self.p2.distance(self.p1)
        return length
    

"
33160,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        length = self.p1.distance(self.p2)
        length += self.p2.distance(self.p1)
        return length
    

"
33163,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return p1.distance(p2)

"
33164,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
33705,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    __init__(p1, p2):
        self.p1 = p1
        self.p2 = p2
    length(self):
        return self.p1.distance(self.p2)
        

"
33707,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    length(self):
        return self.p1.distance(self, p2)
        

"
33708,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    length(self):
        return self.p1.distance(p2)
        

"
33709,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    length(self):
        return self.p1.distance(self.p2)
        

"
33710,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
        

"
34489,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        self.point = (self.initX, self.inity)
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def length(self):
        return distance(self)

"
34490,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)

"
34492,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(p2)

"
35811,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        
    def distance(self):
        return p1.distance(p2)

"
35838,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)

"
37591,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
37595,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
38060,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
38267,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        distance = self.p1.distance(self.p2)
        return distance
        

"
38268,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        distance = self.point1.distance(self.point2)
        return distance
        

"
38275,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
38280,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return super().distance(self.point1, self.point2)
        

"
38285,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        distance = self.distance(self.point1, self.point2)
        return distance
        

"
38286,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return self.distance(self.point1, self.point2)
        

"
38287,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return super.distance(self.point1, self.point2)
        

"
38288,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        distance = super().distance(self.point1, self.point2)
        return distance
        

"
38825,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
        
    def length(self):
        return self.point_1(self.point_2)
   

p1 = Point(0 , 0)
p2 = Point(0, 3)
line = Line(p1, p2)
print(line.length())
"
38827,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
        
    def length(self):
        return self.point_1(self.point_2)
    
"
38828,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
        
    def length(self):
        return self.point_1.distance(self.point_2)
   

p1 = Point(0 , 0)
p2 = Point(0, 3)
line = Line(p1, p2)
print(line.length())
"
39483,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self)
        return distance(self.p2)

"
39484,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self)
        return self.p1.distance(self.p2)

"
39485,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point):
        self.point = Point(p1,p2)
    def length(self):
        return self.p1.distance(self.p2)

"
39487,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.point(p1,p2)
    def length(self)
        return self.p1.distance(self.p2)

"
39488,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.point(p1,p2)
    def length(self):
        return self.p1.distance(self.p2)

"
39489,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.point = Point(p1,p2)
    def length(self):
        return self.p1.distance(self.p2)

"
39490,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self):
        self.point = Point(p1,p2)
    def length(self):
        return self.p1.distance(self.p2)

"
39491,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1,p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)

"
39928,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        length = self.x.distance(self.y)
        return length"
40469,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2): 
        self.p1 = p1
        self.p2 = p2
    def length(self): 
        return self.p1.distance(self.p2)

"
40470,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2): 
        self.p1 = p1
        self.p2 = p2
    def length(self): 
        return self.p1.distance(p2)

"
42177,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    
    def length(self, other):
        return self.distance()
        
"
42178,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    
    def length(self):
        return self.distance()
        
"
42179,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    
    def length(self):
        return distance(self)
"
42180,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    
    def length(self):
        return self.distance()
"
42181,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    
    def length(self):
        return self.x.distance(self.y)
"
42413,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,x,y): 
        self.x=x
        self.y=y
    def length(self): 
        return Point.distance(self.x,self.y)

"
42414,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __str__(self,x,y): 
        self.x=x
        self.y=y
    def length(self): 
        return self.y+self.x

"
42415,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __str__(self,x,y): 
        self.x=x
        self.y=y
    def length(self): 
        return self.y+self.x

"
42418,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __str__(self,x,y): 
        self.x=x
        self.y=y
    def length(self): 
        return distance(self.x,self.y)

"
42424,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self,x,y): 
        self.x=x
        self.y=y
    def length(self): 
        return Point.distance(self.x,self.y)

"
42431,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self,x,y): 
        self.x=x
        self.y=y
    def length(self): 
        return distance(self.x,self.y)

"
42606,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
43573,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""


    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1,p2):
        self.p1 = p1
        self.p2 =p2
        #self.p1x= p1[0]
        #self.p1y= p1[1]
        #self.p2x= p2[0]
        #self.p2y= p2[1]

    def length(self):
        return point.distance(self.p1,self.p2)
p1=Line(0,5)
p2=Line(3,2)


"
43577,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self,other):
        return point.distance()
    

"
43578,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self,other):
        return point.distance()
    

"
43580,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""


    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, point1,point2):
        self.point1 = point1
        self.point2 =point2
        self.point1x= point1[0]
        self.point1y= point1[1]
        self.point2x= point2[0]
        self.point2y= point2[1]

    def length(self):
        return point.distance(self.point1,self.point2)
    

"
43581,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""


    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1,p2):
        self.p1 = p1
        self.p2 =p2
        #self.p1x= p1[0]
        #self.p1y= p1[1]
        #self.p2x= p2[0]
        #self.p2y= p2[1]

    def length(self):
        return Point.distance(self.p1,self.p2)
p1=Line(0,5)
p2=Line(3,2)


"
43582,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""


    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1,p2):
        self.p1 = p1
        self.p2 =p2
        self.p1x= p1[0]
        self.p1y= p1[1]
        self.p2x= p2[0]
        self.p2y= p2[1]

    def length(self):
        return point.distance(self.point1,self.point2)
    

"
43583,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
43584,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""


    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1,p2):
        self.p1 = p1
        self.p2 =p2
        self.p1x= p1[0]
        self.p1y= p1[1]
        self.p2x= p2[0]
        self.p2y= p2[1]

    def length(self):
        return point.distance(self.p1,self.p2)
    

"
44176,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44177,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
44178,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        

"
44180,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44188,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
p = Point(3, 4)
q = Point(5, 12)
dist = p.length(q)

print(dist)
print(dist.getX())
print(dist.getY())"
44189,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44190,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
p = Point(3, 4)
q = Point(5, 12)
dist = p.length(q)

print(mid)
print(mid.getX())
print(mid.getY())"
44192,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44193,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
    
p = Point(3, 4)
q = Point(5, 12)
"
44194,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def length(self, target):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44203,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def length(self, other):
        Point.distance(self, x,y)
    
p = Point(3, 4)
q = Point(5, 12)
"
44204,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def length(self, other):
        Point.distance(self, x,y)
    
p = Point(3, 4)
q = Point(5, 12)
"
44218,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
44245,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44246,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44280,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self):
        mx = (self.x) * 2
        my = (self.y) * 2
        return math.sqrt(mx + my)
"
44281,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self):
        return math.sqrt(self.x + self.y)
"
44282,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self):
        mx = (self.x - other.x) * 2
        my = (self.y - other.y) * 2
        return math.sqrt(mx + my)
"
44283,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def length(self, other):
        mx = (self.x - other.x) * 2
        my = (self.y - other.y) * 2
        return math.sqrt(mx + my)
"
44284,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def length(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)
"
44285,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self, other):
        mx = (self.x - other.x) * 2
        my = (self.y - other.y) * 2
        return math.sqrt(mx + my)
"
44286,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self):
        mx = (self.x - x) * 2
        my = (self.y - y) * 2
        return math.sqrt(mx + my)
"
44287,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self,other):
        mx = (self.x - other.x) * 2
        my = (self.y - other.y) * 2
        return math.sqrt(mx + my)
"
44288,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self):
        mx = (self.x) ** 2
        my = (self.y) ** 2
        return math.sqrt(mx + my)
"
44289,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
    def length(self):
        mx = int(self.x) ** 2
        my = int(self.y) ** 2
        return math.sqrt(mx + my)
"
44302,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        """""" Create a new point at the given coordinates. """"""
        self.x = x
        self.y = y
    def length(self):
        return Point.distance(self.x,self.y)
"
44923,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return Point.distance(self.p1, self.p2)

"
44933,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return point.distance(self.p1, self.p2)

"
44934,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance(self.p1, self.p2)

"
44935,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return super().distance(self.p1, self.p2)

"
45383,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        
        self.p1.distance(self.p2)
"
45384,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        
        self.p1.distance(p2)
"
45385,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        self.p1.distance(self.p2)
"
45386,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        length = self.p1.distance(self.p2)
        return length
"
46417,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p2
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)
        
        

"
46423,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p2
        self.p2 = p2
    def length(self):
        return self.p1.distance(p2)
        
        

"
46424,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
46425,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)
        
        

"
46450,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)

"
47251,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
      
    def length(self):
        return self.point1.distance(self.point2)
        
        

"
47279,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
47308,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
48012,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    def __init__(self):
        self.point1 = Point()
        self.point2 = Point()
 
    

    def length(self, other):
        distance = self.point1.distance(self.point2)
        return distance
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48013,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    
    def __init__(self,x1, y1, x2, y2):
        other = Point()
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    

    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    

class Line:

"
48022,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    def __init__(self, Point(), Point()):
        self.point1 = Point()
        self.point2 = Point()
 
    

    def length(self, other):
        distance = self.point1.distance(self.point2)
        return distance
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48023,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    def __init__(self, other, (x1, y1), (x2, y2)):
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    
    
    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    

class Line:

"
48024,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
 
    

    def length(self, other):
        distance = self.point1.distance(self.point2)
        return distance
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48025,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    
    
    def __init__(self,(x1, y1), (x2, y2)):
        other = Point()
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    
    
    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    

class Line:

"
48026,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    
    
    def __init__(self,[x1, y1], [x2, y2]):
        other = Point()
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    
    
    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    

class Line:

"
48027,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    
    def __init__(self,[x1, y1], [x2, y2]):
        other = Point()
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    

    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    

class Line:

"
48028,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    
    def __init__(self,x1, y1, x2, y2):
        other = Point()
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    

    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48029,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    
    def __init__(self, x1, y1, x2, y2):
        other = Point(x2, y2)
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    

    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48030,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    def __init__(self, x1, y1, x2, y2):
        other = Point(x2, y2)
        self.x1 = x1
        other.x2 = x2
        self.y1 = x1
        other.y2 = y2
 
    

    def length(self, other):
        distance_x = self.x1.distance(other.x2)
        distance_y = self.y1.distance(other.y2)
        length = math.sqrt((distance_x ** 2) + (distance_y ** 2))
        return length
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48031,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point, point1, point2):
    def __init__(self):
        self.point1 = point1
        self.point2 = point2
 
    

    def length(self, other):
        distance = self.point1.distance(self.point2)
        return distance
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48032,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

    
class Line(Point):
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
 
    

    def length(self):
        distance = self.point1.distance(self.point2)
        return distance
        
        
        
        
        
        
        
        
        
        
        
        
        
             
        
    
    
    


"
48038,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        distance = self.point1.distance(self.point2)
        return distance

"
48510,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        self.p1.distance(self.p2)
"
48512,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
48513,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)
"
49055,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)

"
49105,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pointA, pointB):
        self.a = pointA
        self.b = pointB
        
    def length(self):
        return self.a.distance(self.b)
        
"
49108,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pointA, pointB):
        self.a = pointA
        self.b = pointB
        
    def __length(self):
        return self.a.distance(self.b)
        
"
49372,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
   
    def length(self):
        return self.point1.distance(self.point2)
        
        
        
        

"
49373,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
   
    def length(self):
        return self.point1.distance(point2)
        
        
        
        

"
50493,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p2
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
50494,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __innit__(self, p1, p2):
        self.p1 = p2
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
50543,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
"
50544,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
"
50545,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
50546,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, p1, p2):
        self.p1 = Point p1
        self.p2 = Point p2
        
    def length(self):
        return p1.distance(p2)
"
50547,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return super().p1.distance(p2)
"
50548,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
        
    def length(self):
        return self.p1.distance(self.p2)
    


"
50549,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
        
    def length(self):
        return p1.distance(p2)

Point p1 = (2,7)
Point p2 = (9, 0)
Line(p1)
print(line.length())"
50550,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def __str__(self):
        return f""x = {self.x}, y = {self.y}""
        
    def length(self):
        return self.p1.distance(self.p2)
    

Point p1 = (2,7)
Point p2 = (9, 0)
Line(p1)
print(line.length())"
50567,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
50587,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
50588,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, x, y):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
50589,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        self.distance.point1 = point1
        self.distance.point2 = point2
        return 
        

"
50590,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):

        return self.distance.point1.distance.point2
        

"
50591,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):

        return self.distance.point1
        

"
50592,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        

"
50593,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance.p2.distance.p2
        

"
50594,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p2.distance(self.p2)
        

"
50595,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p2.distance
        

"
50596,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p2.distance()
        

"
50599,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        return 

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        

"
50601,mult_class_point_and_line_practice_ac,"import math
class Point:
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.initX = initX
        self.initY = initY
        return 

    def __str__(self):
        return f""x = {self.initX}, y = {self.initY}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        

"
52529,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
"
52561,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self): 
        self.p1.distance(self.p2)
        
        

"
52562,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self): 
        p1.distance(p2)
        
        

"
52563,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self): 
        return self.p1.distance(self.p2)
        
        

"
52564,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self): 
        self.p1.distance(p2)
        
        

"
52565,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def _init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
52566,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
52576,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
54594,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initx, inity):
        self.x = initX
        self.y = initY
        
    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

"
54595,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        """""" Create a new point at the given coordinates. """"""
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        myd = (self.p1 - self.p2) 
        return myd
"
54596,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        """""" Create a new point at the given coordinates. """"""
        self.p1 = p1
        self.p2 = p2
        
    def distance(self, other):
        mx = (self.p1.x - other.x) ** 2
        my = (self.p2.y - other.y) ** 2
        return math.sqrt(mx + my)
"
54597,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        """""" Create a new point at the given coordinates. """"""
        self.p1 = p1
        self.p2 = p2
        
    def length(self, other):
        mx = (self.p1.x - other.x) ** 2
        my = (self.p2.y - other.y) ** 2
        return math.sqrt(mx + my)
"
54600,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)

"
54618,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
55061,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
"
55062,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance(p1, p2)
"
55440,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def __str__(self):
        return f'Point 1 = {self.point1}, Point 2 = {self.point2}'
    
    def length(self):
        pass
        
"
55441,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def __str__(self):
        return f'Point 1 = {self.point1}, Point 2 = {self.point2}'
    
    def length(self):
        return distance(self.point1, self.point2)
        
"
55442,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def __str__(self):
        return f'Point 1 = {self.point1}, Point 2 = {self.point2}'
    
    def length(self):
        aPoint = Point(self.point1[0], self.point1[1])
        return aPoint.distance(self.point2)
    
        
        
"
55445,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def __str__(self):
        return f'Point 1 = {self.point1}, Point 2 = {self.point2}'
    
    def length(self):
        return self.point1.distance(point2)
    
        
        
"
55447,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def __str__(self):
        return f'Point 1 = {self.point1}, Point 2 = {self.point2}'
    
    def length(self):
        return self.point1.distance(self.point2)
    
        
        
"
55491,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
56002,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        distance(self, other)

"
56003,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        Point.distance(self, other)

"
56004,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self, other):
        Point.distance(self, other)

"
56005,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self):
        self.point1 = point1
        self.point2 = point2
        
    def length(self, other):
        return self.point1.distance(self.point2)

"
56006,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,point1,point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        return self.point1.distance(self.point2)

"
56007,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self):
        self.point1 = point1
        self.point2 = point2
    def length(self, other):
        return self.point1.distance(point2

"
56008,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self):
        self.point1 = point1
        self.point2 = point2
        
    def length(self, other):
        return self.point1.distance(point2)

"
56009,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,point1,point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self, other):
        return self.point1.distance(self.point2)

"
56708,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pointa, pointb):
        self.pointa = pointa
        self.pointb = pointb
    def length(self):
        length = distance(self, other)

"
56709,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pointa, pointb):
        self.pointa = pointa
        self.pointb = pointb
    def length(self):
        length = Point.distance(self, other)

"
56744,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.distance(Point)
"
56764,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.distance()
"
56765,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.Point.distance()
"
56769,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.x.distance(self.y)
"
58234,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return (Point.distance(self.p1, self.p2))

"
58711,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        retur self.p1.distance(self.p2)
"
58712,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
"
59699,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.x1 = p1.x
        self.x2 = p2.x
        self.y1 = p1.y
        self.y2 = p2.y
        
    def length(self):
        mx = (self.x1 - self.x2) ** 2
        my = (self.y1 - self.y2) ** 2
        return math.sqrt(mx + my)"
60197,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class AnonLastNamene:
    def __init__(self, a, b):
        self.a = a
        self.b = b
        
    def length(self):
        return self.a.distance(self.b)
"
60793,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.p1=p1
        self.p2=p2
    def distance(self):
        return self.p1.distance(self.p2)
        

"
60805,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.p1=p1
        self.p2=p2
    def length(self):
        return self.p1.distance(self.p2)
        

"
60806,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.p1=p1
        self.p2=p2
    def distance(self):
        return self.p1.distance(p2)
        

"
60828,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.p1 = point1
        self.p2 = point2
    
    def length(self):
        return self.p1.distance(self.p2)

"
60829,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.p1 = point1
        self.p2 = point2
    
    def length():
        return self.p1.distance(self.p2)

"
61050,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
        
    def length(self):
        return self.distance(self.pt1, self.pt2)"
61053,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
        
    def length(self):
        return self.distance(self)"
61054,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.distance(self)"
61057,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.distance()"
61059,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
        
    def length(self):
        return self.distance(self.pt1, self.pt2)"
61060,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
        
    def length(self):
        return self.distance()"
61062,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
        
    def length(self):
        return self.pt1.distance(self.pt2)"
61679,mult_class_point_and_line_practice_ac,"def is_descending(nums):
    i = 0
    flag = 0
    while i < len(nums):
        for i in range(len(nums)):
            if len[i] <= len[i+1]:
                flag += 1
    if flag == 0:
        return True
    if flag != 0:
        return False

from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(is_descending([3,2,1]),True,""is_descending([3,2,1])"")
        self.assertEqual(is_descending([1]),True,""is_descending([1])"")
        self.assertEqual(is_descending([1,2,3]),False,""is_descending([1,2,3]])"")

if myTests == '__main__':
    myTests().main()
"
61680,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return distance
"
61681,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return self.distance
"
61682,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return self.distance
"
61686,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return super().distance(self, other)
"
61687,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return int(self.distance)
"
61690,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return str(distance(self))
"
61691,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return super().distance(self)
"
61790,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
61791,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        self.p1.distance(self.p2)"
61792,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        self.p1.distance(p2)"
62075,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    pass
"
62598,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, x, y):
        self.x=x
        self.y=y
    def length(self):
        self.Point.distance()
        
"
62599,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, x, y):
        self.x=x
        self.y=y
    def length(self):
        return self.x.distance(self.y)
        
"
62600,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
62610,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, x,y):
        self.x=x
        self.y=y
    def length(self):
        return self.x.distance(self.y)
"
62643,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return p1.distance(p2)

"
62645,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)

"
63108,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)
"
63119,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return p1.distance(p2)
"
64085,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
64086,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return.self.p1.distance(self.p2)
"
64596,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
        
    
"
64597,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(p2)
        
    
"
64598,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
"
64599,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return p1.distance(self, p2)
        
    
"
64600,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return p1.distance(p2)
        
    
"
64601,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return p1.distance(p1, p2)
        
    
"
64619,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,pointA,pointB):
        self.pointA = pointA
        self.pointB = pointB
    def length(self):
        return self.pointA.distance(self.pointB)

"
65423,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.ponit2 = point2
        
    def length(self):
        return self.point1.distance(point2)

"
65424,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.ponit2 = point2
        
    def length(self):
        return self.point1.distance(self.point2)

"
65426,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        return self.point1.distance(self.point2)

"
66100,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
66139,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        

"
66711,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
    def length(self):
        return self.p2.distance(self.p1)
        
        

"
66713,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
    def length(self):
        return self.pt2.distance(self.pt1)
        
        

"
67634,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return Point(self.point1, self.point2)
        
        

"
67635,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return Point(int(self.point1), int(self.point2))
        
        

"
67636,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return Point(self.point1, self.point2)
        
        

"
67637,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return Point(point1, point2)
        
        

"
67649,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other1):
        return self.distance(other1)
   
"
67650,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self):
        self.distance()
   
"
67651,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        self.distance()
   
"
67652,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        self.distance()
   
"
67653,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        self.distance(other)
   
"
67654,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        return self.distance()
   
"
67655,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        self.distance(other)
   
"
67656,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        return self.distance(other)
   
"
67657,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self):
        return self.distance()
   
"
67658,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        other.x = x
        other.y = y
        return self.distance(other)
   
"
67659,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self):
        return self.x.distance(self.y)
   
"
67660,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self.x, other):
        return self.distance(other)
   
"
67661,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
    def length(self, other):
        return self.distance(other)
   
"
68434,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
        

"
69044,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, point_1, point_2):
        self.point_1 = point_1
        self.point_2 = point_2
    
    def length(self):
        return self.point_2.distance(self.point_1)

"
69732,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
69735,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
       
    def length(self):
        return self.p1.distance(self.p2)

"
70361,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        self.Point.distance()
   
     def __str__(self):
        return str(self.point)


"
70368,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        self.Point.distance()


"
70373,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        self.distance()


"
70375,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        self.Point.distance()
   
    def __str__(self):
        return str(self.point)


"
70390,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def_init_(self, initx, inity):
        self.x = initX
        self.y = initY
        
        def line(self):
            self.line = (self.x, self.y)
        
        
        
        
    

"
70391,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
        def line(self):
            self.line = (self.x, self.y)
        
        
        
        
    

"
70392,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
        def line(self):
            self.line = (self.x, 4, self.y, 5)
        
        
        
        
    

"
70393,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
        def line(self):
            self.line = (20, 30)
        
        
        
        
    

"
70398,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def _init_(self, initx, inity):
        self.x = initx
        self.y = inity
    def length(self):
        return self.x.distance(self.y)

"
70404,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initx, inity):
        self.x = initx
        self.y = inity
    def length(self):
        return self.x.distance(self.y)

"
70408,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pX, pY):
        self.x = pX
        self.y = pY
    def length(self):
        return self.x.distance(self.y)

"
70410,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
70412,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init(self, pX, pY):
        self.x = pX
        self.y = pY
    def length(self):
        return self.x.distance(self.y)

"
70513,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
70868,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
71135,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return distance(self.p1, self.p2)
        
        
"
71144,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():

    def __init__(self, x1, y1, x2, y2):
        self.p1 = Point(x1, y1)
        self.p2 = Point(x2, y2)
        
    def length(self):
        return self.distance(self.p1, self.p2)
        
        
"
71145,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __init__(self, p1, p1):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        reutrn distance(self.p1, self.p2)
        
        
"
71146,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __init__(self, p1, p1):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return distance(self.p1, self.p2)
        
        
"
71147,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(p2)
        
        
"
71149,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        
        
"
71150,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance(self.p1, self.p2)
        
        
"
71151,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():

    def __init__(self, p1, p2):
        self.p1 = Point()
        self.p2 = Point()
        
    def length(self):
        return self.distance(self.p1, self.p2)
        
        
"
71152,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance(self.p1, self.p2)
        
        
"
71153,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():

    def __init__(self, p1, p2):
        self.p1 = Point(x1, y1)
        self.p2 = Point(x2, y2)
        
    def length(self):
        return self.distance(self.p1, self.p2)
        
        
"
71154,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance(self)
        
        
"
71332,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        

"
71333,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, x1, y1, x2, w2):
        self.p1 = Point(x1, y1)
        self.p2 = Point(x2, y2)
        
    def Length():
        return self.p1.distance(self.p2)
        

"
71335,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p1):
        self.p1 = p1
        self.p2 = p2
        
    def Length():
        return self.p1.distance(self.p2)
        

"
71336,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, x1, y1, x2, y2):
        self.p1 = Point(x1, y1)
        self.p2 = Point(x2, y2)
        
    def Length():
        return self.p1.distance(self.p2)
        

"
71337,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, x1, y1, x2, w2):
        self.p1 = Point(x1, y1)
        self.p1 = Point(x2, y2)
        

"
71338,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def Length():
        return self.p1.distance(self.p2)
        

"
72603,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        self.p1 = other
        return other.distance(p2.y)
        
        

"
72606,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self, other):
        return other.distance(p2.y)
        
        

"
72607,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self, other):
        self.other = other
        return other.distance(p2.y)
        
        

"
72608,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2.y)
        
        

"
72609,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(p2.y)
        
        

"
72610,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        x.distance(p2.y)
        
        

"
72612,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        p1.x.distance(p2.y)
        
        

"
72613,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self, other):
        self.p1 = other
        return other.distance(p2.y)
        
        

"
72614,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2.y)
        
        

"
72616,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        
        

"
72656,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return self.point1.distance(self.point1, self.point2)
        
        

"
72657,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return distance(self.point1, self.point2)
        
        

"
72658,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        self.distance(self.point1, self.point2)
        

"
72659,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        distance(self.point1, self.point2)
        

"
72660,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        point1.distance(self.point1, self.point2)
        

"
72661,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return distance(self.point1, self.point2)
        
        

"
72662,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return point1.distance(self.point1, self.point2)
        
        

"
72663,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__ (self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    def length(self):
        return self.distance(self.point1, self.point2)
        
        

"
72665,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.p1 = point1
        self.p2 = point2
    def length(self):
        return self.p1.distance(self.p2)
        
        

"
72666,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.p1 = Point()
        self.p2 = Point()
    def length(self):
        return self.p1.distance(self.p1, self.p2)
        
        

"
72667,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.p1 = point1
        self.p2 = point2
    def length(self):
        return self.p1.distance(self.p1, self.p2)
        
        

"
72668,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__ (self, point1, point2):
        self.p1 = point1
        self.p2 = point2
    def length(self):
        return self.p1.distance(p2)
        
        

"
73200,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
73201,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
73202,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
73607,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
73610,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        self.p1.distance(self.p2)"
73611,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
74157,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
74164,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
74823,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return(self.p1.distance(self.p2))
        

"
76487,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def length(self):
        self.
        
"
76488,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
     pass
        
"
76491,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,point1,point2):
        self.start = point1
        self.end = point2
      
    def length(self):
        return Point.distance(self.start,self.end)
        
"
77415,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
        def __init__(self, point1, point2):
            self.point1 = point1
            self.point2 = point2
            
        def length(self):
            return Point.distance(self.point1, self.point2)
"
77416,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
        def __init__(self, point1, point2):
            self.point1 = point1
            self.point2 = point2
            
        def length(self):
            return distance(self.point1, self.point2)
"
77446,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)

"
78087,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return math.sqrt((self.point1) + (self.point2))

"
78090,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return math.sqrt(self.point1 + self.point2)

"
78092,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return distance(self.point1, self.point2)

"
78094,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        distance(self.point1, self.point2)

"
78095,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return self.distance(self.point1, self.point2)

"
78096,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        mx = (self.p1 - self.p2) ** 2
        return mx

"
78098,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        return math.sqrt(self.point1 + self.point2)

"
78104,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
    
    def length(self):
        mx = (self.point1 - self.point2) ** 2
        return mx

"
78132,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
78133,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        returnself.p1.distance(self.p2)"
78138,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
78980,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)

"
78981,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return distance(p1, p2)

"
80007,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2

    def length(self):
        len = self.p1.distance(self.p2)
        return len"
80008,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2

    def length(self):
        len = self.p1.distance(p2)
        return len"
80025,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def length():
        pointX = Point()
        pointY = Point()
        return pointX.distance(pointX, pointY)
"
80026,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def length():
        pointX = Point()
        pointY = Point()
        distance = pointX.distance(pointX, pointY)
        return distance
"
80027,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def length():
        pointX = Point()
        pointY = Point()
        distance = pointX.distance(pointY)
        return distance
"
80034,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, pointX, pointY):
        self.pointX = pointX
        self.pointY = pointY
        
    def length(self):
        return distance(self.pointX, self.pointY)

"
80035,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, pointX, pointY):
        self.pointX = pointX
        self.pointY = pointY
        
    def length(self):
        return distance(self.pointX, self.pointY)

"
80037,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(point):
    def __init__(self, pointX, pointY):
        self.pointX = pointX
        self.pointY = pointY
        
    def length(self):
        return distance(self.pointX, self.pointY)

"
80879,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,initX,initY):
        super.__init__(initX,initY)
    def length(self):
        return f'{self.Point.distance}'
   

"
80882,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,initX,initY):
        self.x = initX
        self.y = initY
    def length(Point):
        return f'{Point.distance}'
   

"
80883,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,initX,initY):
         self.x = initX
        self.y = initY
    def length(self):
        return f'{self.Point.distance}'
   

"
80884,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,initX,initY):
        self.x = initX
        self.y = initY
    def length(self):
        return f'{self.Point.distance}'
   

"
80980,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
    def length(self):
        return self.pt1.distance(self.pt2)
"
80986,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
    def length(self):
        return self.p1.distance(self.pt2)
"
80988,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,pt1, pt2):
        self.pt1 = pt1
        self.pt2 = pt2
    def length(self):
        pt_class = Point(pt1, pt2)
        return pt_class.distance()
"
81451,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self, self.other):
        length = Point.distance(other)
        return length
        

"
81453,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self, other):
        length = Point.distance(self.other)
        return length
        

"
81457,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        

"
81459,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self):
        length = Point.distance()
        return length
        

"
81460,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        length = math.sqrt(mx + my)
        return length
        

"
81461,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self, other):
        length = Point.distance()
        return length
        

"
81463,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self):
        mx = (self.x - self.other.x) ** 2
        my = (self.y - self.other.y) ** 2
        length = math.sqrt(mx + my)
        return length
        

"
81464,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self):
        length = Point.distance(self, other)
        return length
        

"
81465,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self, other):
        length = Point.distance(other)
        return length
        

"
81466,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self):
        length = Point.distance(self)
        return length
        

"
81467,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY
        
    def length(self):
        length = Point.distance(self, self.other)
        return length
        

"
81612,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(distance):
        return self.p1.distance(self.p2)
        

"
81613,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length():
        return self.p1.distance(self.p2)
        

"
81614,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length:
        return self.p1.distance(p2)
        

"
81615,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2)
        

"
81616,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length():
        return self.p1.distance(p2)
        

"
81618,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self, distance):
        return self.p1.distance(self.p2)
        

"
82213,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1= p1
        self.p2= p2
    def length(self):
        self.p1.distance(self.p2)
        
    
 

"
82214,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1= p1
        self.p2= p2
    def length(self):
        return self.p1.distance(self.p2)
       
    
 

"
83646,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2, initX1, initX2, initY1, initY2):
        self.point1 = Point(initX1, initY1)
        self.point2 = Point(initX2, initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83647,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.point = Point(initX, initY)
        self.point = Point(initX, initY)
        
    def length(self):
        return self.point.distance(point)"
83648,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.point1 = Point(initX, initY)
        self.point2 = Point(initX, initY)
        
    def length(self):
        return self.point1.distance(point2)"
83649,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2, initX1, initX2, initY1, initY2):
        self.point1 = Point(initX1, initY1)
        self.point2 = Point(initX2, initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83650,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX1, initY1, initX2, initY2):
        self.point1 = Point(initX1, initY1)
        self.point2 = Point(initX2, initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83651,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2, initX1, initX2, initY1, initY2):
        self.point1.x = initX1;
        self.point2.x = initX2;
        self.point1.y = initY1;
        self.point2.y = initY2;
        self.point1 = Point(initX1, initY1)
        self.point2 = Point(initX2, initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83652,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.point1 = Point(initX, initY)
        self.point2 = Point(initX, initY)
        
    def length(self):
        return self.point.distance(point)"
83653,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = Point(initX, initY)
        self.point2 = Point(initX, initY)
        
    def length(self):
        return self.point1.distance(point2)"
83654,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX1, initX2, initY1, initY2):
        self.point1 = Point(initX1, initY1)
        self.point2 = Point(initX2, initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83655,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        return self.point1.distance(point2)"
83656,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2, initX1, initX2, initY1, initY2):
        self.initX1 = initX1;
        self.initX2 = initX2;
        self.initY1 = initY1;
        self.initY2 = initY2;
        self.point1 = Point(self.initX1, self.initY1)
        self.point2 = Point(self.initX2, self.initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83657,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2, initX1, initX2, initY1, initY2):
        self.initX1 = initX1;
        self.initX2 = initX2;
        self.initY1 = initY1;
        self.initY2 = initY2;
        self.point1 = Point(initX1, initY1)
        self.point2 = Point(initX2, initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83658,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX1, initY1, initX2, initY2):
        self.point1 = Point(initX1, initY1)
        self.point2 = Point(initX2, initY2)
        
    def length(self):
        return self.point1.distance(point2)"
83659,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        return self.point1.distance(self.point2)"
83692,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(p2) 
"
83693,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    
    def length(self):
        return self.p1.distance(self.p2) 
"
84364,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY
        
    def length(self):
        return self.distance
"
84367,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
"
84472,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
84889,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    
    pass

"
84898,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    
 

"
84899,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

"
84900,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    
 

"
84901,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    
 

"
84902,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    
    pass

"
84903,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point, p1, p2):
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    
 

"
84904,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    
 

"
84906,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init___(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    
 

"
85534,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance
        
        
    
"
85535,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def length(self):
        return self.distance
        
        
    
"
85537,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def length(self):
        return self.distance(self, other)
        
        
    
"
85538,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def length(self, other):
        return self.distance()
        
        
    
"
85542,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        self.distance()
        
        
    
"
85543,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance()
        
        
    
"
85546,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def length(self, other):
        return self.distance
        
        
    
"
85548,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance
        
        
    
"
85549,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, initX, initY):
        return self.distance
        
        
    
"
85550,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, x, y):
        return self.distance
        
        
    
"
85551,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, initX, initY):
        return self.distance
        
        
    
"
85552,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, initX, initY):
        return self.distance(initX, initY)
        
        
    
"
85553,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self):
        return self.distance
        
        
    
"
85554,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance
        
        
    
"
85555,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self):
        return self.distance
        
        
    
"
85556,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance
        
        
    
"
85557,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self):
        return self.distance
        
        
    
"
85558,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance(initX, initY)
        
        
    
"
85559,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance
        
        
    
"
85560,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, other):
        return self.distance
        
        
    
"
85562,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    
    def length(self, self.x, self.y):
        return self.distance
        
        
    
"
85566,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self, p1, p2):
        return self.distance
        
        
    
"
85567,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance
        
        
    
"
85576,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        
        
        
    
"
85711,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
        
        
p1 = Point(5, 3)
p2 = Point(5, 5)
"
85712,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
        
        
a = Point(5, 3)
b = Point(5, 5)
"
85713,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
        
        
a = Point(5, 3)
b = Point(5, 5)
"
85714,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return p1.distance(p2)
        
        
a = Point(5, 3)
b = Point (5, 5)
"
85715,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.distance(p1, p2)
        
        
a = Point(5, 3)
b = Point(5, 5)
"
85716,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return self.p1.distance(self.p2)
        
        
p1 = Point(5, 3)
p2 = Point(5, 5)
"
86754,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
87366,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        self.distance()
        return
"
87367,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        return distance(p1, p2)
"
87368,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
       return self.distance()
"
87369,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        
    def length(self):
        self.distance()
"
87376,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

        def __init__(self, initX, initY):
            self.initX = initX
            self.initY = initY
            
        def length(self):
            return self.initX.distance(self.initY)
"
87377,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

        def __init__(self, initX, initY):
            self.initX = initX
            self.initY = initY
            
        def length(self):
            return self.p1.distance(p2)
"
87378,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

        def __init__(self, initX, initY):
            self.initX = initX
            self.initY = initY
            
        def length(self):
            return self.initX.distance(initY)
"
87947,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
    

"
87950,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    

"
87951,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)"
87956,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
87964,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
88629,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __ init__(self, point1, point2):
        self.p1=point1
        self.p2=point2
    def length(self):
        return self.pl.distance(self.p2) 
        
        
        
"
88630,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):

    def __ init__(self,point1,point2):
        self.p1=point1
        self.p2=point2
    def length(self):
        return distance(self.point1,self.point2)
        
        
        
"
88631,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __ init__(self,point1,point2):
        self.p1=point1
        self.p2=point2
    def length(self):
        return self.pl.distance(self.p2) 
        
        
        
"
88632,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.p1=point1
        self.p2=point2
    def length(self):
        return self.p1.distance(self.p2) 
        
        
        
"
88633,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __ init__(self, point1, point2):
        self.p1=point1
        self.p2=point2
    def length(self):
        return self.pl.distance(self.p2) 
        
        
        
"
88634,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.p1=point1
        self.p2=point2
    def length(self):
        return self.pl.distance(self.p2) 
        
        
        
"
89028,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __int__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
        
    def lengh(self):
        self.p1.distance(p2)
        

"
89029,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __int__(self,p1,p2):
        self.p1 = p1
        self.p2 = p2
        
    def lengh(self):
        

"
89269,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)

"
89888,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, Point_1, Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
        
    def length(self):
        return self.point1.distance(self.point2)
"
89894,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, Line Point_1, Line Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
    def length():
        super().distance()
"
89895,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, Point_1, Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
    def length(point_given):
        return self.point1.distance(point_given)
"
89896,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, Point_1, Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
        
    def length():
        return self.point1.distance(self.point2)
"
89897,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, Point Point_1, Point Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
    def length():
        super().distance()
"
89898,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line(Point):
    def __init__(self, Point Point_1, Point Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
    def length():
        return self.point1.distance(self.point2)
"
89899,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, Point_1, Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
    def length():
        return self.point1.distance(self.point2)
"
89900,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, Point Point_1, Point Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
    def length():
        return self.point1.distance(self.point2)
"
89901,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line():
    def __init__(self, Point_1, Point_2):
        self.point1 = Point_1
        self.point2 = Point_2
    def length(point_given):
        return self.point1.distance(self.point2)
"
91327,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x1, x2, y1, y2):
            self.x1 = x1
            self.x2 = x2
            self.y1 = y1
            self.y2 = y2
            self.length = 0

    def length(self):
            self.length = math.sqrt((y2-y1)**(2+(x2-x1)**2))
            print(self.length)"
91328,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, tup1, tup2):
            self.x1 = tup1[0]
            self.x2 = tup2[0]
            self.y1 = tup1[1]
            self.y2 = tup2[1]
            self.slope = 0
            self.length = 0

    def length(self):
            self.length = math.sqrt((y2-y1)**(2+(x2-x1)**2))
            print(self.length)"
91329,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x1, x2, y1, y2):
            self.x1 = x1
            self.x2 = x2
            self.y1 = y1
            self.y2 = y2

    def length(self):
            self.length = math.sqrt((y2-y1)**(2+(x2-x1)**2))
            print(self.length)"
91330,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
            self.p1 = Point(x1, y1)
            self.p2 = Point(x2, y2)

    def length(self):
            self.length = math.sqrt((y2-y1)**(2+(x2-x1)**2))
            print(self.length)"
91331,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2, x1, x2, y1, y2):
            self.p1 = Point(x1, y1)
            self.p2 = Point(x2, y2)

    def length(self):
            self.length = math.sqrt((y2-y1)**(2+(x2-x1)**2))
            print(self.length)"
91332,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
            self.p1 = p1
            self.p2 = p2

    def length(self):
            return self.p1.distance(self.p2)"
91443,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1x, point1y, point2x, point2y):
        self.point1x = point1x
        self.point1y = point1y
        self.point2x = point2x
        self.point2y = point2y
        
    def length(self):
        p1 = Point(self.point1x, self.point1y)
        p2 = Point(self.point2x, self.point2y)
        d = p.distance(self.point2x, self.point2y)

a = Point(1,2)

    
        
"
91448,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        p = Point(self.point1)
        d = p.distance(self.point2)

a = Line(1,2)

    
        
"
91449,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        p = Point(self.point1)
        d = self.point1.distance(self.point2)

a = Line((1,2), (3,4))

    
        
"
91451,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self, distance):
        p = Point(self.point1)
        d = p.distance(self.point2)
    
        
"
91452,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1x, point1y, point2x, point2y):
        self.point1x = point1x
        self.point1y = point1y
        self.point2x = point2x
        self.point2y = point2y
        
    def length(self):
        p = Point(self.point1x, self.point1y)
        d = p.distance(self.point2x, self.point2y)

a = Point(1,2)

    
        
"
91453,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def line(self, distance):
        p = Point(self.point1, self.point2)
        d = p.distance()
    
        
"
91454,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1x, point1y, point2x, point2y):
        self.point1x = point1x
        self.point1y = point1y
        self.point2x = point2x
        self.point2y = point2y
        
    def length(self):
        p1 = Point(self.point1x, self.point1y)
        p2 = Point(self.point2x, self.point2y)
        d = p.distance((self.point2x, self.point2y))

a = Point(1,2)

    
        
"
91455,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self, distance):
        p = Point(self.point1, self.point2)
        d = p.distance()
    
        
"
91456,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self, distance):
        p = Point(self.point1, self.point2)
        d = p.distance((0,0))
    
        
"
91457,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        p = Point(self.point1)
        d = p.distance(self.point2)
    
        
"
91458,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1x, point1y, point2x, point2y):
        self.point1x = point1x
        self.point1y = point1y
        self.point2x = point2x
        self.point2y = point2y
        
    def length(self):
        p = Point(self.point1x, self.point1y)
        d = p.distance(self.point2x, self.point2y)

a = Line(1,2,3,4)

    
        
"
91459,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, point1,point2):
        self.point1 = point1
        self.point2 = point2
        
    def length(self):
        p = Point(self.point1)
        d = self.point1.distance(self.point2)

a = Line(1,2)

    
        
"
92594,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.p1 = initX
        self.p2 = initY
        
    def length(self):
       return self.p1.distance(p2)

    def __str__(self):
        

"
92595,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.p1 = initX
        self.p2 = initY
        
    def length()
       return distance(p1, p2)

    def __str__(self):
        

"
92596,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.p1 = initX
        self.p2 = initY
        
    def length(self):
       return self.p1.distance(p2)

        

"
92597,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.p1 = initX
        self.p2 = initY
        
    def length(self, other)
       return distance(p1, p2)

    def __str__(self):
        

"
92598,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.p1 = initX
        self.p2 = initY
        
    def length(self, other)
       return self.p1.distance(p2)

    def __str__(self):
        

"
92599,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.p1 = initX
        self.p2 = initY
        
    def length(self):
       return self.p1.distance(self.p2)

        

"
92600,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, initX, initY):
        self.p1 = initX
        self.p2 = initY
        
    def length(self)
       return self.p1.distance(p2)

    def __str__(self):
        

"
92603,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:

"
92608,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def length(self):
        return self.p1.distance(self.p2)
"
93598,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__:
        self.initX = initX
        self.initY = initY
    def __str__:
        return self.initX.distance(self.initY)
        

"
93600,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.initX = initX
        self.initY = initY
        
    def length(self):
        return self.initX.distance(self.initY)

"
93601,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
        def __init__:
        self.initX = initX
        self.initY = initY
        
        def __str__:
        return self.initX.distance(self.initY)
        

"
95358,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def length(self):
        return distance(x,y)

"
95365,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def length(self):
        return self.x.distance(self.y)

"
95484,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def length(self):
        return distance(self.x,self.y)

"
96112,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.point = Point(initX, initY)
    def distance(self):
        return self.Point.distance()

"
96113,mult_class_point_and_line_practice_ac,"import math
class Point:

    def __init__(self, initX, initY):
        """""" Create a new point at the given coordinates. """"""
        self.x = initX
        self.y = initY

    def __str__(self):
        return f""x = {self.x}, y = {self.y}""

    def distance(self, other):
        mx = (self.x - other.x) ** 2
        my = (self.y - other.y) ** 2
        return math.sqrt(mx + my)

class Line:
    
    def __init__(self, initX, initY):
        self.point = Point(initX, initY)
    def length(self):
        self.Point.distance()

"
